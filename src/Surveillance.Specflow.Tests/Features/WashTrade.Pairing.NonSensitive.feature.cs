// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Surveillance.Specflow.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("WashTrade Pairing Non Sensitive Parameters")]
    public partial class WashTradePairingNonSensitiveParametersFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "WashTrade.Pairing.NonSensitive.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "WashTrade Pairing Non Sensitive Parameters", "\tIn order to meet MAR compliance requirements\r\n\tI need to be able to detect when " +
                    "traders are executing trades\r\n\twith no meaningful change of ownership\r\n\tBy pairi" +
                    "ng their trades for average value change being below\r\n\tthreshold parameters", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 8
#line hidden
            TechTalk.SpecFlow.Table table475 = new TechTalk.SpecFlow.Table(new string[] {
                        "WindowHours",
                        "PairingPositionMinimumNumberOfPairedTrades",
                        "PairingPositionPercentagePriceChangeThresholdPerPair",
                        "PairingPositionPercentageVolumeDifferenceThreshold",
                        "PairingPositionMaximumAbsoluteCurrencyAmount",
                        "PairingPositionMaximumAbsoluteCurrency",
                        "UsePairing"});
            table475.AddRow(new string[] {
                        "1",
                        "2",
                        "0.10",
                        "0.10",
                        "1000000",
                        "GBX",
                        "true"});
#line 9
 testRunner.Given("I have the wash trade rule parameter values", ((string)(null)), table475, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Empty Universe yields no alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradenonsensitive")]
        public virtual void EmptyUniverseYieldsNoAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Empty Universe yields no alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradenonsensitive"});
#line 16
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table476 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
#line 17
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table476, "Given ");
#line 19
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("One Trade For Vodafone yields no alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradenonsensitive")]
        public virtual void OneTradeForVodafoneYieldsNoAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One Trade For Vodafone yields no alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradenonsensitive"});
#line 25
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table477 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table477.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
#line 26
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table477, "Given ");
#line 29
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("One Trade For Barclays yields no alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradenonsensitive")]
        public virtual void OneTradeForBarclaysYieldsNoAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One Trade For Barclays yields no alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradenonsensitive"});
#line 35
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table478 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table478.AddRow(new string[] {
                        "Barclays",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
#line 36
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table478, "Given ");
#line 39
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trades In Wash Trade For Different Securities yields no alert")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradenonsensitive")]
        public virtual void TwoTradesInWashTradeForDifferentSecuritiesYieldsNoAlert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trades In Wash Trade For Different Securities yields no alert", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradenonsensitive"});
#line 45
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table479 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table479.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table479.AddRow(new string[] {
                        "Barclays",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
#line 46
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table479, "Given ");
#line 50
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 51
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Three Trades at same price point In Wash Trade yields no alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradenonsensitive")]
        public virtual void ThreeTradesAtSamePricePointInWashTradeYieldsNoAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Three Trades at same price point In Wash Trade yields no alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradenonsensitive"});
#line 56
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table480 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table480.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table480.AddRow(new string[] {
                        "Vodafone",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table480.AddRow(new string[] {
                        "Vodafone",
                        "2",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
#line 57
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table480, "Given ");
#line 62
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 63
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trades In Wash Trade yields one alert")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradenonsensitive")]
        public virtual void TwoTradesInWashTradeYieldsOneAlert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trades In Wash Trade yields one alert", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradenonsensitive"});
#line 68
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table481 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table481.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table481.AddRow(new string[] {
                        "Vodafone",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
#line 69
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table481, "Given ");
#line 73
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 74
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trade For Micron yields one alerts when within 1 hour")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradenonsensitive")]
        [NUnit.Framework.CategoryAttribute("timewindow")]
        public virtual void TwoTradeForMicronYieldsOneAlertsWhenWithin1Hour()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trade For Micron yields one alerts when within 1 hour", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradenonsensitive",
                        "timewindow"});
#line 81
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table482 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table482.AddRow(new string[] {
                        "Micron",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table482.AddRow(new string[] {
                        "Micron",
                        "1",
                        "01/01/2018 10:00:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 10:00:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
#line 82
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table482, "Given ");
#line 86
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 87
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trade For Micron yields no alerts when 2 hours apart")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradenonsensitive")]
        [NUnit.Framework.CategoryAttribute("timewindow")]
        public virtual void TwoTradeForMicronYieldsNoAlertsWhen2HoursApart()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trade For Micron yields no alerts when 2 hours apart", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradenonsensitive",
                        "timewindow"});
#line 93
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table483 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table483.AddRow(new string[] {
                        "Micron",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table483.AddRow(new string[] {
                        "Micron",
                        "1",
                        "01/01/2018 11:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 11:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
#line 94
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table483, "Given ");
#line 98
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 99
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trade For Micron yields one alerts when exactly 1 hour apart")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradenonsensitive")]
        [NUnit.Framework.CategoryAttribute("timewindow")]
        public virtual void TwoTradeForMicronYieldsOneAlertsWhenExactly1HourApart()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trade For Micron yields one alerts when exactly 1 hour apart", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradenonsensitive",
                        "timewindow"});
#line 105
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table484 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table484.AddRow(new string[] {
                        "Micron",
                        "0",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table484.AddRow(new string[] {
                        "Micron",
                        "1",
                        "01/01/2018 10:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 10:33:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
#line 106
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table484, "Given ");
#line 110
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 111
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trades In Wash Trade but outside of relative percentage change yields zero al" +
            "erts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradenonsensitive")]
        [NUnit.Framework.CategoryAttribute("percentofvaluechange")]
        public virtual void TwoTradesInWashTradeButOutsideOfRelativePercentageChangeYieldsZeroAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trades In Wash Trade but outside of relative percentage change yields zero al" +
                    "erts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradenonsensitive",
                        "percentofvaluechange"});
#line 117
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table485 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table485.AddRow(new string[] {
                        "BAE",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table485.AddRow(new string[] {
                        "BAE",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "80",
                        "1000",
                        "1000"});
#line 118
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table485, "Given ");
#line 122
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 123
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trades In Wash Trade and on relative percentage change boundary yields one al" +
            "erts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradenonsensitive")]
        [NUnit.Framework.CategoryAttribute("percentofvaluechange")]
        public virtual void TwoTradesInWashTradeAndOnRelativePercentageChangeBoundaryYieldsOneAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trades In Wash Trade and on relative percentage change boundary yields one al" +
                    "erts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradenonsensitive",
                        "percentofvaluechange"});
#line 129
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table486 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table486.AddRow(new string[] {
                        "BAE",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table486.AddRow(new string[] {
                        "BAE",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "110",
                        "1000",
                        "1000"});
#line 130
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table486, "Given ");
#line 134
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 135
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trades In Wash Trade and inside of relative percentage change yields one aler" +
            "ts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradenonsensitive")]
        [NUnit.Framework.CategoryAttribute("percentofvaluechange")]
        public virtual void TwoTradesInWashTradeAndInsideOfRelativePercentageChangeYieldsOneAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trades In Wash Trade and inside of relative percentage change yields one aler" +
                    "ts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradenonsensitive",
                        "percentofvaluechange"});
#line 141
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table487 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table487.AddRow(new string[] {
                        "BAE",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table487.AddRow(new string[] {
                        "BAE",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "109",
                        "1000",
                        "1000"});
#line 142
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table487, "Given ");
#line 146
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 147
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trades In Wash Trade but outside of relative percentage volume change yields " +
            "zero alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradenonsensitive")]
        [NUnit.Framework.CategoryAttribute("percentofvolumechange")]
        public virtual void TwoTradesInWashTradeButOutsideOfRelativePercentageVolumeChangeYieldsZeroAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trades In Wash Trade but outside of relative percentage volume change yields " +
                    "zero alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradenonsensitive",
                        "percentofvolumechange"});
#line 153
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table488 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table488.AddRow(new string[] {
                        "AMD",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table488.AddRow(new string[] {
                        "AMD",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "97",
                        "1200",
                        "1200"});
#line 154
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table488, "Given ");
#line 158
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 159
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trades In Wash Trade and on relative percentage volume change boundary yields" +
            " one alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradenonsensitive")]
        [NUnit.Framework.CategoryAttribute("percentofvolumechange")]
        public virtual void TwoTradesInWashTradeAndOnRelativePercentageVolumeChangeBoundaryYieldsOneAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trades In Wash Trade and on relative percentage volume change boundary yields" +
                    " one alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradenonsensitive",
                        "percentofvolumechange"});
#line 165
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table489 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table489.AddRow(new string[] {
                        "AMD",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table489.AddRow(new string[] {
                        "AMD",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "97",
                        "1000",
                        "1000"});
#line 166
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table489, "Given ");
#line 170
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 171
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trades In Wash Trade and inside of relative percentage volume change yields o" +
            "ne alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradenonsensitive")]
        [NUnit.Framework.CategoryAttribute("percentofvolumechange")]
        public virtual void TwoTradesInWashTradeAndInsideOfRelativePercentageVolumeChangeYieldsOneAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trades In Wash Trade and inside of relative percentage volume change yields o" +
                    "ne alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradenonsensitive",
                        "percentofvolumechange"});
#line 177
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table490 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table490.AddRow(new string[] {
                        "AMD",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table490.AddRow(new string[] {
                        "AMD",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "97",
                        "1099",
                        "1099"});
#line 178
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table490, "Given ");
#line 182
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 183
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trades In Wash Trade and inside of absolute value change yields one alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradenonsensitive")]
        [NUnit.Framework.CategoryAttribute("maximumabsolutevaluechange")]
        public virtual void TwoTradesInWashTradeAndInsideOfAbsoluteValueChangeYieldsOneAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trades In Wash Trade and inside of absolute value change yields one alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradenonsensitive",
                        "maximumabsolutevaluechange"});
#line 190
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table491 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table491.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "1000000",
                        "1000000",
                        "1000000"});
            table491.AddRow(new string[] {
                        "Vodafone",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "1000000",
                        "1000000",
                        "1000000"});
#line 191
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table491, "Given ");
#line 195
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 196
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trades In Wash Trade and exactly absolute value change yields one alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradenonsensitive")]
        [NUnit.Framework.CategoryAttribute("maximumabsolutevaluechange")]
        public virtual void TwoTradesInWashTradeAndExactlyAbsoluteValueChangeYieldsOneAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trades In Wash Trade and exactly absolute value change yields one alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradenonsensitive",
                        "maximumabsolutevaluechange"});
#line 202
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table492 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table492.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "1000000",
                        "1000000",
                        "1000000"});
            table492.AddRow(new string[] {
                        "Vodafone",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "1000000",
                        "999999",
                        "999999"});
#line 203
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table492, "Given ");
#line 207
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 208
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trades In Wash Trade and outside of absolute value change change yields zero " +
            "alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradenonsensitive")]
        [NUnit.Framework.CategoryAttribute("maximumabsolutevaluechange")]
        public virtual void TwoTradesInWashTradeAndOutsideOfAbsoluteValueChangeChangeYieldsZeroAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trades In Wash Trade and outside of absolute value change change yields zero " +
                    "alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradenonsensitive",
                        "maximumabsolutevaluechange"});
#line 214
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table493 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table493.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "1000000",
                        "1000000",
                        "1000000"});
            table493.AddRow(new string[] {
                        "Vodafone",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "1000000",
                        "999998",
                        "999998"});
#line 215
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table493, "Given ");
#line 219
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 220
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Five Trade For Barclays yields zero alerts when just buys")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradenonsensitive")]
        [NUnit.Framework.CategoryAttribute("justbuy")]
        public virtual void FiveTradeForBarclaysYieldsZeroAlertsWhenJustBuys()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Five Trade For Barclays yields zero alerts when just buys", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradenonsensitive",
                        "justbuy"});
#line 228
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table494 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table494.AddRow(new string[] {
                        "Barclays",
                        "0",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "1000000",
                        "1000000",
                        "1000000"});
            table494.AddRow(new string[] {
                        "Barclays",
                        "1",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "1000000",
                        "1000000",
                        "1000000"});
            table494.AddRow(new string[] {
                        "Barclays",
                        "2",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "1000000",
                        "1000000",
                        "1000000"});
            table494.AddRow(new string[] {
                        "Barclays",
                        "3",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "1000000",
                        "1000000",
                        "1000000"});
            table494.AddRow(new string[] {
                        "Barclays",
                        "4",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "1000000",
                        "1000000",
                        "1000000"});
#line 229
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table494, "Given ");
#line 236
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 237
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Five Trade For Barclays yields zero alerts when just sells")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradenonsensitive")]
        [NUnit.Framework.CategoryAttribute("justsell")]
        public virtual void FiveTradeForBarclaysYieldsZeroAlertsWhenJustSells()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Five Trade For Barclays yields zero alerts when just sells", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradenonsensitive",
                        "justsell"});
#line 243
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table495 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table495.AddRow(new string[] {
                        "Barclays",
                        "0",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "1000000",
                        "1000000",
                        "1000000"});
            table495.AddRow(new string[] {
                        "Barclays",
                        "1",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "1000000",
                        "1000000",
                        "1000000"});
            table495.AddRow(new string[] {
                        "Barclays",
                        "2",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "1000000",
                        "1000000",
                        "1000000"});
            table495.AddRow(new string[] {
                        "Barclays",
                        "3",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "1000000",
                        "1000000",
                        "1000000"});
            table495.AddRow(new string[] {
                        "Barclays",
                        "4",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "1000000",
                        "1000000",
                        "1000000"});
#line 244
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table495, "Given ");
#line 251
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 252
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trade For Nvidia yields one alerts with losses")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradenonsensitive")]
        [NUnit.Framework.CategoryAttribute("washtradelosses")]
        public virtual void TwoTradeForNvidiaYieldsOneAlertsWithLosses()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trade For Nvidia yields one alerts with losses", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradenonsensitive",
                        "washtradelosses"});
#line 259
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table496 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table496.AddRow(new string[] {
                        "Nvidia",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table496.AddRow(new string[] {
                        "Nvidia",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table496.AddRow(new string[] {
                        "Nvidia",
                        "1",
                        "01/01/2018 10:00:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 10:00:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "99",
                        "1000",
                        "1000"});
            table496.AddRow(new string[] {
                        "Nvidia",
                        "1",
                        "01/01/2018 10:00:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 10:00:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "98",
                        "1000",
                        "1000"});
#line 260
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table496, "Given ");
#line 266
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 267
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trade For Nvidia with partial fills yields one alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradenonsensitive")]
        [NUnit.Framework.CategoryAttribute("washtradepartialfill")]
        public virtual void TwoTradeForNvidiaWithPartialFillsYieldsOneAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trade For Nvidia with partial fills yields one alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradenonsensitive",
                        "washtradepartialfill"});
#line 274
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table497 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table497.AddRow(new string[] {
                        "Nvidia",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "150"});
            table497.AddRow(new string[] {
                        "Nvidia",
                        "1",
                        "01/01/2018 10:00:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 10:00:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "150"});
#line 275
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table497, "Given ");
#line 279
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 280
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trade For Nvidia with pre market order times yields one alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradenonsensitive")]
        [NUnit.Framework.CategoryAttribute("washtradeearlyorder")]
        public virtual void TwoTradeForNvidiaWithPreMarketOrderTimesYieldsOneAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trade For Nvidia with pre market order times yields one alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradenonsensitive",
                        "washtradeearlyorder"});
#line 288
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table498 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table498.AddRow(new string[] {
                        "Nvidia",
                        "0",
                        "01/01/2018 06:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 06:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "150"});
            table498.AddRow(new string[] {
                        "Nvidia",
                        "1",
                        "01/01/2018 06:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 06:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "150"});
#line 289
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 02/01/2018 :", ((string)(null)), table498, "Given ");
#line 293
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 294
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trade For Nvidia with post market order times yields one alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradenonsensitive")]
        [NUnit.Framework.CategoryAttribute("washtradelateorder")]
        public virtual void TwoTradeForNvidiaWithPostMarketOrderTimesYieldsOneAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trade For Nvidia with post market order times yields one alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradenonsensitive",
                        "washtradelateorder"});
#line 300
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table499 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table499.AddRow(new string[] {
                        "Nvidia",
                        "0",
                        "01/01/2018 20:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 20:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "150"});
            table499.AddRow(new string[] {
                        "Nvidia",
                        "1",
                        "01/01/2018 20:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 20:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "150"});
#line 301
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 02/01/2018 :", ((string)(null)), table499, "Given ");
#line 305
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 306
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trade For Nvidia with next day sell within window yields one alert")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradenonsensitive")]
        [NUnit.Framework.CategoryAttribute("washtradenextdaysell")]
        public virtual void TwoTradeForNvidiaWithNextDaySellWithinWindowYieldsOneAlert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trade For Nvidia with next day sell within window yields one alert", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradenonsensitive",
                        "washtradenextdaysell"});
#line 312
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table500 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table500.AddRow(new string[] {
                        "Nvidia",
                        "0",
                        "01/01/2018 12:00:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 12:00:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "150"});
            table500.AddRow(new string[] {
                        "Nvidia",
                        "1",
                        "01/02/2018 12:00:00",
                        "",
                        "",
                        "",
                        "",
                        "01/02/2018 12:00:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "150"});
#line 313
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table500, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table501 = new TechTalk.SpecFlow.Table(new string[] {
                        "WindowHours",
                        "PairingPositionMinimumNumberOfPairedTrades",
                        "PairingPositionPercentagePriceChangeThresholdPerPair",
                        "PairingPositionPercentageVolumeDifferenceThreshold",
                        "PairingPositionMaximumAbsoluteCurrencyAmount",
                        "PairingPositionMaximumAbsoluteCurrency",
                        "UsePairing"});
            table501.AddRow(new string[] {
                        "24",
                        "2",
                        "0.10",
                        "0.10",
                        "1000000",
                        "GBX",
                        "true"});
#line 317
 testRunner.And("I have the wash trade rule parameter values", ((string)(null)), table501, "And ");
#line 320
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 321
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trade For Nvidia with next day sell outside window yields zero alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradenonsensitive")]
        [NUnit.Framework.CategoryAttribute("washtradenextdaysell")]
        public virtual void TwoTradeForNvidiaWithNextDaySellOutsideWindowYieldsZeroAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trade For Nvidia with next day sell outside window yields zero alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradenonsensitive",
                        "washtradenextdaysell"});
#line 327
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table502 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table502.AddRow(new string[] {
                        "Nvidia",
                        "0",
                        "01/01/2018 12:00:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 12:00:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "150"});
            table502.AddRow(new string[] {
                        "Nvidia",
                        "1",
                        "01/02/2018 12:00:00",
                        "",
                        "",
                        "",
                        "",
                        "01/02/2018 12:00:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "150"});
#line 328
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 02/01/2018 :", ((string)(null)), table502, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table503 = new TechTalk.SpecFlow.Table(new string[] {
                        "WindowHours",
                        "PairingPositionMinimumNumberOfPairedTrades",
                        "PairingPositionPercentagePriceChangeThresholdPerPair",
                        "PairingPositionPercentageVolumeDifferenceThreshold",
                        "PairingPositionMaximumAbsoluteCurrencyAmount",
                        "PairingPositionMaximumAbsoluteCurrency",
                        "UsePairing"});
            table503.AddRow(new string[] {
                        "22",
                        "2",
                        "0.10",
                        "0.10",
                        "1000000",
                        "GBX",
                        "true"});
#line 332
 testRunner.And("I have the wash trade rule parameter values", ((string)(null)), table503, "And ");
#line 335
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 336
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trade For Nvidia and two for vodafone yields two alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradenonsensitive")]
        [NUnit.Framework.CategoryAttribute("washtrademultiplealerts")]
        public virtual void TwoTradeForNvidiaAndTwoForVodafoneYieldsTwoAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trade For Nvidia and two for vodafone yields two alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradenonsensitive",
                        "washtrademultiplealerts"});
#line 342
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table504 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table504.AddRow(new string[] {
                        "Nvidia",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table504.AddRow(new string[] {
                        "Nvidia",
                        "1",
                        "01/01/2018 10:00:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 10:00:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table504.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table504.AddRow(new string[] {
                        "Vodafone",
                        "1",
                        "01/01/2018 10:00:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 10:00:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
#line 343
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table504, "Given ");
#line 349
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 350
 testRunner.Then("I will have 2 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trade For Nvidia in USD converts to GBX for absolute currency breach")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradenonsensitive")]
        [NUnit.Framework.CategoryAttribute("washtradecurrencies")]
        public virtual void TwoTradeForNvidiaInUSDConvertsToGBXForAbsoluteCurrencyBreach()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trade For Nvidia in USD converts to GBX for absolute currency breach", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradenonsensitive",
                        "washtradecurrencies"});
#line 357
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table505 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table505.AddRow(new string[] {
                        "Nvidia",
                        "0",
                        "01/01/2018 06:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 06:30:00",
                        "MARKET",
                        "BUY",
                        "USD",
                        "",
                        "10000000",
                        "1000",
                        "150"});
            table505.AddRow(new string[] {
                        "Nvidia",
                        "1",
                        "01/01/2018 06:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 06:30:00",
                        "MARKET",
                        "SELL",
                        "USD",
                        "",
                        "10000000",
                        "1000",
                        "150"});
#line 358
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 02/01/2018 :", ((string)(null)), table505, "Given ");
#line 362
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 363
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
