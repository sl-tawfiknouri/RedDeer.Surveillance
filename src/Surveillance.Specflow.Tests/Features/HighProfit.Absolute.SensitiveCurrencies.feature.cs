// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Surveillance.Specflow.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("HighProfit Absolute Sensitive Currency Parameters")]
    public partial class HighProfitAbsoluteSensitiveCurrencyParametersFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "HighProfit.Absolute.SensitiveCurrencies.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "HighProfit Absolute Sensitive Currency Parameters", "\tIn order to meet MAR compliance requirements\r\n\tI need to be able to detect when " +
                    "traders are executing trades\r\n\tWhich generate unusual levels of profits\r\n\tBy mea" +
                    "suring their security trade profits as an absolute currency adjusted return", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 10
#line hidden
            TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                        "WindowHours",
                        "HighProfitPercentage",
                        "HighProfitAbsolute",
                        "HighProfitCurrency",
                        "HighProfitUseCurrencyConversions"});
            table88.AddRow(new string[] {
                        "1",
                        "",
                        "1000",
                        "GBX",
                        "true"});
#line 11
 testRunner.Given("I have the high profit rule parameter values", ((string)(null)), table88, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Empty Universe yields no alerts")]
        [NUnit.Framework.CategoryAttribute("highprofit")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutecurrency")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutesensitive")]
        public virtual void EmptyUniverseYieldsNoAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Empty Universe yields no alerts", null, new string[] {
                        "highprofit",
                        "highprofitabsolutecurrency",
                        "highprofitabsolutesensitive"});
#line 18
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
#line 19
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table89, "Given ");
#line 21
 testRunner.When("I run the high profit rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
 testRunner.Then("I will have 0 high profit alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Single order yields no alerts")]
        [NUnit.Framework.CategoryAttribute("highprofit")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutecurrency")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutesensitive")]
        public virtual void SingleOrderYieldsNoAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Single order yields no alerts", null, new string[] {
                        "highprofit",
                        "highprofitabsolutecurrency",
                        "highprofitabsolutesensitive"});
#line 27
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table90.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "USD",
                        "",
                        "10",
                        "100",
                        "100"});
#line 28
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table90, "Given ");
#line 31
 testRunner.When("I run the high profit rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 32
 testRunner.Then("I will have 0 high profit alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Buy Sell orders within the time window yields one alerts")]
        [NUnit.Framework.CategoryAttribute("highprofit")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutecurrency")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutesensitive")]
        public virtual void BuySellOrdersWithinTheTimeWindowYieldsOneAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Buy Sell orders within the time window yields one alerts", null, new string[] {
                        "highprofit",
                        "highprofitabsolutecurrency",
                        "highprofitabsolutesensitive"});
#line 37
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table91 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table91.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "USD",
                        "",
                        "10",
                        "1000",
                        "1000"});
            table91.AddRow(new string[] {
                        "Vodafone",
                        "1",
                        "01/01/2018 09:45:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:45:00",
                        "MARKET",
                        "SELL",
                        "USD",
                        "",
                        "12",
                        "1000",
                        "1000"});
#line 38
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table91, "Given ");
#line 42
 testRunner.When("I run the high profit rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 43
 testRunner.Then("I will have 1 high profit alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Buy Sell partially filled orders within the time window yields one alerts")]
        [NUnit.Framework.CategoryAttribute("highprofit")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutecurrency")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutesensitive")]
        public virtual void BuySellPartiallyFilledOrdersWithinTheTimeWindowYieldsOneAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Buy Sell partially filled orders within the time window yields one alerts", null, new string[] {
                        "highprofit",
                        "highprofitabsolutecurrency",
                        "highprofitabsolutesensitive"});
#line 48
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table92 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table92.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "USD",
                        "",
                        "10",
                        "10000",
                        "1000"});
            table92.AddRow(new string[] {
                        "Vodafone",
                        "1",
                        "01/01/2018 09:45:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:45:00",
                        "MARKET",
                        "SELL",
                        "USD",
                        "",
                        "12",
                        "10000",
                        "1000"});
#line 49
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table92, "Given ");
#line 53
 testRunner.When("I run the high profit rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 54
 testRunner.Then("I will have 1 high profit alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Buy Sell unfilled orders within the time window yields zero alerts")]
        [NUnit.Framework.CategoryAttribute("highprofit")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutecurrency")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutesensitive")]
        public virtual void BuySellUnfilledOrdersWithinTheTimeWindowYieldsZeroAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Buy Sell unfilled orders within the time window yields zero alerts", null, new string[] {
                        "highprofit",
                        "highprofitabsolutecurrency",
                        "highprofitabsolutesensitive"});
#line 59
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table93 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table93.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "MARKET",
                        "BUY",
                        "USD",
                        "",
                        "10",
                        "1000",
                        ""});
            table93.AddRow(new string[] {
                        "Vodafone",
                        "1",
                        "01/01/2018 09:45:00",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "MARKET",
                        "SELL",
                        "USD",
                        "",
                        "12",
                        "1000",
                        ""});
#line 60
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table93, "Given ");
#line 64
 testRunner.When("I run the high profit rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 65
 testRunner.Then("I will have 0 high profit alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Buy Sell many orders within the time window yields two alerts")]
        [NUnit.Framework.CategoryAttribute("highprofit")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutecurrency")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutesensitive")]
        public virtual void BuySellManyOrdersWithinTheTimeWindowYieldsTwoAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Buy Sell many orders within the time window yields two alerts", null, new string[] {
                        "highprofit",
                        "highprofitabsolutecurrency",
                        "highprofitabsolutesensitive"});
#line 70
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table94 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table94.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "USD",
                        "",
                        "10",
                        "1000",
                        "1000"});
            table94.AddRow(new string[] {
                        "Vodafone",
                        "1",
                        "01/01/2018 09:45:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:45:00",
                        "MARKET",
                        "SELL",
                        "USD",
                        "",
                        "12",
                        "1000",
                        "1000"});
            table94.AddRow(new string[] {
                        "Nvidia",
                        "2",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "USD",
                        "",
                        "10",
                        "1000",
                        "1000"});
            table94.AddRow(new string[] {
                        "Nvidia",
                        "3",
                        "01/01/2018 09:45:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:45:00",
                        "MARKET",
                        "SELL",
                        "USD",
                        "",
                        "12",
                        "1000",
                        "1000"});
            table94.AddRow(new string[] {
                        "Barclays",
                        "4",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "USD",
                        "",
                        "10",
                        "1000",
                        "1000"});
            table94.AddRow(new string[] {
                        "Barclays",
                        "5",
                        "01/01/2018 09:45:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:45:00",
                        "MARKET",
                        "SELL",
                        "USD",
                        "",
                        "12",
                        "1000",
                        "1000"});
#line 71
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table94, "Given ");
#line 79
 testRunner.When("I run the high profit rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 80
 testRunner.Then("I will have 2 high profit alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Buy Sell orders different exchange within the time window yields one alerts")]
        [NUnit.Framework.CategoryAttribute("highprofit")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutecurrency")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutesensitive")]
        public virtual void BuySellOrdersDifferentExchangeWithinTheTimeWindowYieldsOneAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Buy Sell orders different exchange within the time window yields one alerts", null, new string[] {
                        "highprofit",
                        "highprofitabsolutecurrency",
                        "highprofitabsolutesensitive"});
#line 85
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table95 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table95.AddRow(new string[] {
                        "Nvidia",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "USD",
                        "",
                        "10",
                        "1000",
                        "1000"});
            table95.AddRow(new string[] {
                        "Nvidia",
                        "1",
                        "01/01/2018 09:45:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:45:00",
                        "MARKET",
                        "SELL",
                        "USD",
                        "",
                        "12",
                        "1000",
                        "1000"});
#line 86
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table95, "Given ");
#line 90
 testRunner.When("I run the high profit rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 91
 testRunner.Then("I will have 1 high profit alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Buy just buy orders within the time window yields one alerts")]
        [NUnit.Framework.CategoryAttribute("highprofit")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutecurrency")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutesensitive")]
        public virtual void BuyJustBuyOrdersWithinTheTimeWindowYieldsOneAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Buy just buy orders within the time window yields one alerts", null, new string[] {
                        "highprofit",
                        "highprofitabsolutecurrency",
                        "highprofitabsolutesensitive"});
#line 96
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table96 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table96.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "USD",
                        "",
                        "10",
                        "1000",
                        "1000"});
            table96.AddRow(new string[] {
                        "Vodafone",
                        "1",
                        "01/01/2018 09:45:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:45:00",
                        "MARKET",
                        "BUY",
                        "USD",
                        "",
                        "12",
                        "1000",
                        "1000"});
#line 97
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table96, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table97 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "Epoch",
                        "Bid",
                        "Ask",
                        "Price",
                        "Currency",
                        "Volume"});
            table97.AddRow(new string[] {
                        "Vodafone",
                        "01/01/2018 09:30:00",
                        "101",
                        "101",
                        "110",
                        "USD",
                        "10000"});
#line 101
 testRunner.And("With the intraday market data :", ((string)(null)), table97, "And ");
#line 104
 testRunner.When("I run the high profit rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 105
 testRunner.Then("I will have 2 high profit alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cover just cover orders within the time window yields one alerts")]
        [NUnit.Framework.CategoryAttribute("highprofit")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutecurrency")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutesensitive")]
        public virtual void CoverJustCoverOrdersWithinTheTimeWindowYieldsOneAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cover just cover orders within the time window yields one alerts", null, new string[] {
                        "highprofit",
                        "highprofitabsolutecurrency",
                        "highprofitabsolutesensitive"});
#line 110
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table98 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table98.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "COVER",
                        "USD",
                        "",
                        "10",
                        "1000",
                        "1000"});
            table98.AddRow(new string[] {
                        "Vodafone",
                        "1",
                        "01/01/2018 09:45:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:45:00",
                        "MARKET",
                        "COVER",
                        "USD",
                        "",
                        "12",
                        "1000",
                        "1000"});
#line 111
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table98, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table99 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "Epoch",
                        "Bid",
                        "Ask",
                        "Price",
                        "Currency",
                        "Volume"});
            table99.AddRow(new string[] {
                        "Vodafone",
                        "01/01/2018 09:30:00",
                        "101",
                        "101",
                        "110",
                        "USD",
                        "10000"});
#line 115
 testRunner.And("With the intraday market data :", ((string)(null)), table99, "And ");
#line 118
 testRunner.When("I run the high profit rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 119
 testRunner.Then("I will have 2 high profit alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Sell just sell orders within the time window yields zero alerts")]
        [NUnit.Framework.CategoryAttribute("highprofit")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutecurrency")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutesensitive")]
        public virtual void SellJustSellOrdersWithinTheTimeWindowYieldsZeroAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sell just sell orders within the time window yields zero alerts", null, new string[] {
                        "highprofit",
                        "highprofitabsolutecurrency",
                        "highprofitabsolutesensitive"});
#line 124
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table100 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table100.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "USD",
                        "",
                        "10",
                        "1000",
                        "1000"});
            table100.AddRow(new string[] {
                        "Vodafone",
                        "1",
                        "01/01/2018 09:45:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:45:00",
                        "MARKET",
                        "SELL",
                        "USD",
                        "",
                        "12",
                        "1000",
                        "1000"});
#line 125
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table100, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table101 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "Epoch",
                        "Bid",
                        "Ask",
                        "Price",
                        "Currency",
                        "Volume"});
            table101.AddRow(new string[] {
                        "Vodafone",
                        "01/01/2018 09:30:00",
                        "101",
                        "101",
                        "110",
                        "USD",
                        "10000"});
#line 129
 testRunner.And("With the intraday market data :", ((string)(null)), table101, "And ");
#line 132
 testRunner.When("I run the high profit rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 133
 testRunner.Then("I will have 0 high profit alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Short just short orders within the time window yields zero alerts")]
        [NUnit.Framework.CategoryAttribute("highprofit")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutecurrency")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutesensitive")]
        public virtual void ShortJustShortOrdersWithinTheTimeWindowYieldsZeroAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Short just short orders within the time window yields zero alerts", null, new string[] {
                        "highprofit",
                        "highprofitabsolutecurrency",
                        "highprofitabsolutesensitive"});
#line 138
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table102 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table102.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SHORT",
                        "USD",
                        "",
                        "10",
                        "1000",
                        "1000"});
            table102.AddRow(new string[] {
                        "Vodafone",
                        "1",
                        "01/01/2018 09:45:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:45:00",
                        "MARKET",
                        "SHORT",
                        "USD",
                        "",
                        "12",
                        "1000",
                        "1000"});
#line 139
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table102, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table103 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "Epoch",
                        "Bid",
                        "Ask",
                        "Price",
                        "Currency",
                        "Volume"});
            table103.AddRow(new string[] {
                        "Vodafone",
                        "01/01/2018 09:30:00",
                        "101",
                        "101",
                        "110",
                        "USD",
                        "10000"});
#line 143
 testRunner.And("With the intraday market data :", ((string)(null)), table103, "And ");
#line 146
  testRunner.When("I run the high profit rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 147
 testRunner.Then("I will have 0 high profit alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Buy Sell orders exactly on the time window yields one alerts")]
        [NUnit.Framework.CategoryAttribute("highprofit")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutecurrency")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutesensitive")]
        public virtual void BuySellOrdersExactlyOnTheTimeWindowYieldsOneAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Buy Sell orders exactly on the time window yields one alerts", null, new string[] {
                        "highprofit",
                        "highprofitabsolutecurrency",
                        "highprofitabsolutesensitive"});
#line 152
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table104 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table104.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "USD",
                        "",
                        "10",
                        "1000",
                        "1000"});
            table104.AddRow(new string[] {
                        "Vodafone",
                        "1",
                        "01/01/2018 10:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 10:30:00",
                        "MARKET",
                        "SELL",
                        "USD",
                        "",
                        "12",
                        "1000",
                        "1000"});
#line 153
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table104, "Given ");
#line 157
 testRunner.When("I run the high profit rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 158
 testRunner.Then("I will have 1 high profit alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Buy Sell orders outside of the time window yields two alerts")]
        [NUnit.Framework.CategoryAttribute("highprofit")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutecurrency")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutesensitive")]
        public virtual void BuySellOrdersOutsideOfTheTimeWindowYieldsTwoAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Buy Sell orders outside of the time window yields two alerts", null, new string[] {
                        "highprofit",
                        "highprofitabsolutecurrency",
                        "highprofitabsolutesensitive"});
#line 163
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table105 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table105.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "USD",
                        "",
                        "10",
                        "1000",
                        "1000"});
            table105.AddRow(new string[] {
                        "Vodafone",
                        "1",
                        "01/01/2018 11:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 11:30:00",
                        "MARKET",
                        "SELL",
                        "USD",
                        "",
                        "12",
                        "1000",
                        "1000"});
#line 164
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table105, "Given ");
#line 168
 testRunner.When("I run the high profit rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 169
 testRunner.Then("I will have 0 high profit alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Buy Sell orders yields one alerts")]
        [NUnit.Framework.CategoryAttribute("highprofit")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutecurrency")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutesensitive")]
        public virtual void BuySellOrdersYieldsOneAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Buy Sell orders yields one alerts", null, new string[] {
                        "highprofit",
                        "highprofitabsolutecurrency",
                        "highprofitabsolutesensitive"});
#line 174
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table106 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table106.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "USD",
                        "",
                        "10",
                        "1000",
                        "1000"});
            table106.AddRow(new string[] {
                        "Vodafone",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "USD",
                        "",
                        "12",
                        "1000",
                        "1000"});
#line 175
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table106, "Given ");
#line 179
 testRunner.When("I run the high profit rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 180
 testRunner.Then("I will have 1 high profit alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Buy Sell orders at exact threshold yields two alerts")]
        [NUnit.Framework.CategoryAttribute("highprofit")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutecurrency")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutesensitive")]
        public virtual void BuySellOrdersAtExactThresholdYieldsTwoAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Buy Sell orders at exact threshold yields two alerts", null, new string[] {
                        "highprofit",
                        "highprofitabsolutecurrency",
                        "highprofitabsolutesensitive"});
#line 185
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table107 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table107.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "USD",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table107.AddRow(new string[] {
                        "Vodafone",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "USD",
                        "",
                        "110",
                        "1000",
                        "1000"});
#line 186
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table107, "Given ");
#line 190
 testRunner.When("I run the high profit rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 191
 testRunner.Then("I will have 1 high profit alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Buy Sell orders at just below threshold yields zero alerts")]
        [NUnit.Framework.CategoryAttribute("highprofit")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutecurrency")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutesensitive")]
        public virtual void BuySellOrdersAtJustBelowThresholdYieldsZeroAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Buy Sell orders at just below threshold yields zero alerts", null, new string[] {
                        "highprofit",
                        "highprofitabsolutecurrency",
                        "highprofitabsolutesensitive"});
#line 196
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table108 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table108.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "USD",
                        "",
                        "10",
                        "4",
                        "4"});
            table108.AddRow(new string[] {
                        "Vodafone",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "USD",
                        "",
                        "11",
                        "4",
                        "4"});
#line 197
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table108, "Given ");
#line 201
 testRunner.When("I run the high profit rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 202
 testRunner.Then("I will have 0 high profit alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Buy order with increase in market price (bmll) yields one alert")]
        [NUnit.Framework.CategoryAttribute("highprofit")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutecurrency")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutesensitive")]
        public virtual void BuyOrderWithIncreaseInMarketPriceBmllYieldsOneAlert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Buy order with increase in market price (bmll) yields one alert", null, new string[] {
                        "highprofit",
                        "highprofitabsolutecurrency",
                        "highprofitabsolutesensitive"});
#line 207
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table109 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table109.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "USD",
                        "",
                        "100",
                        "100",
                        "100"});
#line 208
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table109, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table110 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "Epoch",
                        "Bid",
                        "Ask",
                        "Price",
                        "Currency",
                        "Volume"});
            table110.AddRow(new string[] {
                        "Vodafone",
                        "01/01/2018 09:30:00",
                        "101",
                        "101",
                        "110",
                        "USD",
                        "10000"});
#line 211
 testRunner.And("With the intraday market data :", ((string)(null)), table110, "And ");
#line 214
 testRunner.When("I run the high profit rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 215
 testRunner.Then("I will have 1 high profit alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Buy order with increase in market price to exact percentage (bmll) yields one ale" +
            "rt")]
        [NUnit.Framework.CategoryAttribute("highprofit")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutecurrency")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutesensitive")]
        public virtual void BuyOrderWithIncreaseInMarketPriceToExactPercentageBmllYieldsOneAlert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Buy order with increase in market price to exact percentage (bmll) yields one ale" +
                    "rt", null, new string[] {
                        "highprofit",
                        "highprofitabsolutecurrency",
                        "highprofitabsolutesensitive"});
#line 221
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table111 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table111.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "USD",
                        "",
                        "100",
                        "100",
                        "100"});
#line 222
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table111, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table112 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "Epoch",
                        "Bid",
                        "Ask",
                        "Price",
                        "Currency",
                        "Volume"});
            table112.AddRow(new string[] {
                        "Vodafone",
                        "01/01/2018 09:30:00",
                        "101",
                        "101",
                        "110",
                        "USD",
                        "10000"});
#line 225
 testRunner.And("With the intraday market data :", ((string)(null)), table112, "And ");
#line 228
 testRunner.When("I run the high profit rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 229
 testRunner.Then("I will have 1 high profit alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Buy order with substantial increase in market price (bmll) yields one alert")]
        [NUnit.Framework.CategoryAttribute("highprofit")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutecurrency")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutesensitive")]
        public virtual void BuyOrderWithSubstantialIncreaseInMarketPriceBmllYieldsOneAlert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Buy order with substantial increase in market price (bmll) yields one alert", null, new string[] {
                        "highprofit",
                        "highprofitabsolutecurrency",
                        "highprofitabsolutesensitive"});
#line 234
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table113 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table113.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "USD",
                        "",
                        "100",
                        "100",
                        "100"});
#line 235
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table113, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table114 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "Epoch",
                        "Bid",
                        "Ask",
                        "Price",
                        "Currency",
                        "Volume"});
            table114.AddRow(new string[] {
                        "Vodafone",
                        "01/01/2018 09:30:00",
                        "101",
                        "101",
                        "110",
                        "USD",
                        "10000"});
#line 238
 testRunner.And("With the intraday market data :", ((string)(null)), table114, "And ");
#line 241
 testRunner.When("I run the high profit rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 242
 testRunner.Then("I will have 1 high profit alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Buy order with decrease in market price (bmll) yields zero alerts")]
        [NUnit.Framework.CategoryAttribute("highprofit")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutecurrency")]
        [NUnit.Framework.CategoryAttribute("highprofitabsolutesensitive")]
        public virtual void BuyOrderWithDecreaseInMarketPriceBmllYieldsZeroAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Buy order with decrease in market price (bmll) yields zero alerts", null, new string[] {
                        "highprofit",
                        "highprofitabsolutecurrency",
                        "highprofitabsolutesensitive"});
#line 247
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table115 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table115.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "USD",
                        "",
                        "100",
                        "100",
                        "100"});
#line 248
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table115, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table116 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "Epoch",
                        "Bid",
                        "Ask",
                        "Price",
                        "Currency",
                        "Volume"});
            table116.AddRow(new string[] {
                        "Vodafone",
                        "01/01/2018 09:30:00",
                        "101",
                        "101",
                        "98",
                        "USD",
                        "10000"});
#line 251
 testRunner.And("With the intraday market data :", ((string)(null)), table116, "And ");
#line 254
 testRunner.When("I run the high profit rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 255
 testRunner.Then("I will have 0 high profit alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
