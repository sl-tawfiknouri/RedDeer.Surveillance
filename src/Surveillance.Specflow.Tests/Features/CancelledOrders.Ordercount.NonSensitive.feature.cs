// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Surveillance.Specflow.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CancelledOrders Order Count Non Sensitive Parameters")]
    [NUnit.Framework.CategoryAttribute("cancelledorders")]
    [NUnit.Framework.CategoryAttribute("cancelledorderscount")]
    [NUnit.Framework.CategoryAttribute("cancelledordercountnonsensitive")]
    public partial class CancelledOrdersOrderCountNonSensitiveParametersFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CancelledOrders.OrderCount.NonSensitive.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CancelledOrders Order Count Non Sensitive Parameters", "\t\tIn order to meet MAR compliance requirements\r\n\t\tI need to be able to detect whe" +
                    "n traders are placing orders\r\n\t\twhich are then cancelled in an unusual pattern", ProgrammingLanguage.CSharp, new string[] {
                        "cancelledorders",
                        "cancelledorderscount",
                        "cancelledordercountnonsensitive"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 9
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "WindowHours",
                        "CancelledOrderPercentagePositionThreshold",
                        "CancelledOrderCountPercentageThreshold",
                        "MinimumNumberOfTradesToApplyRuleTo",
                        "MaximumNumberOfTradesToApplyRuleTo"});
            table1.AddRow(new string[] {
                        "1",
                        "",
                        "0.5",
                        "2",
                        ""});
#line 10
   testRunner.Given("I have the cancelled orders rule parameter values", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Empty Universe yields no alerts")]
        public virtual void EmptyUniverseYieldsNoAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Empty Universe yields no alerts", null, ((string[])(null)));
#line 14
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
#line 15
   testRunner.Given("I have the orders for a universe from 01/01/2018 to 01/05/2018 :", ((string)(null)), table2, "Given ");
#line 17
         testRunner.When("I run the cancelled orders rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
   testRunner.Then("I will have 0 cancelled orders alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("No cancelled orders just placed in range yields no alerts")]
        public virtual void NoCancelledOrdersJustPlacedInRangeYieldsNoAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No cancelled orders just placed in range yields no alerts", null, ((string[])(null)));
#line 20
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "CancelledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table3.AddRow(new string[] {
                        "Barclays",
                        "1",
                        "01/01/2019",
                        "",
                        "Market",
                        "Buy",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
            table3.AddRow(new string[] {
                        "Barclays",
                        "2",
                        "01/01/2019",
                        "",
                        "Market",
                        "Buy",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
#line 21
  testRunner.Given("I have the orders for a universe from 01/01/2019 to 01/01/2019 :", ((string)(null)), table3, "Given ");
#line 25
   testRunner.When("I run the cancelled orders rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 26
   testRunner.Then("I will have 0 cancelled orders alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("One cancelled orders just out of range out of two yields one alert")]
        public virtual void OneCancelledOrdersJustOutOfRangeOutOfTwoYieldsOneAlert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One cancelled orders just out of range out of two yields one alert", null, ((string[])(null)));
#line 28
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "CancelledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table4.AddRow(new string[] {
                        "Barclays",
                        "1",
                        "01/01/2019 09:30:00",
                        "",
                        "Market",
                        "Buy",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
            table4.AddRow(new string[] {
                        "Barclays",
                        "2",
                        "01/01/2019 10:31:00",
                        "01/01/2019",
                        "Market",
                        "Buy",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
#line 29
  testRunner.Given("I have the orders for a universe from 01/01/2019 to 01/01/2019 :", ((string)(null)), table4, "Given ");
#line 33
   testRunner.When("I run the cancelled orders rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
   testRunner.Then("I will have 0 cancelled orders alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("One cancelled orders just in range out of two yields one alert")]
        public virtual void OneCancelledOrdersJustInRangeOutOfTwoYieldsOneAlert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One cancelled orders just in range out of two yields one alert", null, ((string[])(null)));
#line 36
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "CancelledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table5.AddRow(new string[] {
                        "Barclays",
                        "1",
                        "01/01/2019 09:30:00",
                        "",
                        "Market",
                        "Buy",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
            table5.AddRow(new string[] {
                        "Barclays",
                        "2",
                        "01/01/2019 10:29:00",
                        "01/01/2019",
                        "Market",
                        "Buy",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
#line 37
  testRunner.Given("I have the orders for a universe from 01/01/2019 to 01/01/2019 :", ((string)(null)), table5, "Given ");
#line 41
   testRunner.When("I run the cancelled orders rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 42
   testRunner.Then("I will have 1 cancelled orders alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("One cancelled orders exactly on the range out of two yields one alert")]
        public virtual void OneCancelledOrdersExactlyOnTheRangeOutOfTwoYieldsOneAlert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One cancelled orders exactly on the range out of two yields one alert", null, ((string[])(null)));
#line 44
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "CancelledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table6.AddRow(new string[] {
                        "Barclays",
                        "1",
                        "01/01/2019 09:30:00",
                        "",
                        "Market",
                        "Buy",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
            table6.AddRow(new string[] {
                        "Barclays",
                        "2",
                        "01/01/2019 10:30:00",
                        "01/01/2019",
                        "Market",
                        "Buy",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
#line 45
  testRunner.Given("I have the orders for a universe from 01/01/2019 to 01/01/2019 :", ((string)(null)), table6, "Given ");
#line 49
   testRunner.When("I run the cancelled orders rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 50
   testRunner.Then("I will have 1 cancelled orders alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("One cancelled order in a buy sell pattern yields one alert")]
        public virtual void OneCancelledOrderInABuySellPatternYieldsOneAlert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One cancelled order in a buy sell pattern yields one alert", null, ((string[])(null)));
#line 52
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "CancelledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table7.AddRow(new string[] {
                        "Barclays",
                        "1",
                        "01/01/2019 09:30:00",
                        "",
                        "Market",
                        "Buy",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
            table7.AddRow(new string[] {
                        "Barclays",
                        "2",
                        "01/01/2019 10:29:00",
                        "01/01/2019",
                        "Market",
                        "Sell",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
#line 53
  testRunner.Given("I have the orders for a universe from 01/01/2019 to 01/01/2019 :", ((string)(null)), table7, "Given ");
#line 57
   testRunner.When("I run the cancelled orders rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 58
   testRunner.Then("I will have 1 cancelled orders alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("One cancelled order in a short cover pattern yields one alert")]
        public virtual void OneCancelledOrderInAShortCoverPatternYieldsOneAlert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One cancelled order in a short cover pattern yields one alert", null, ((string[])(null)));
#line 60
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "CancelledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table8.AddRow(new string[] {
                        "Barclays",
                        "1",
                        "01/01/2019 09:30:00",
                        "",
                        "Market",
                        "Short",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
            table8.AddRow(new string[] {
                        "Barclays",
                        "2",
                        "01/01/2019 10:29:00",
                        "01/01/2019",
                        "Market",
                        "Cover",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
#line 61
  testRunner.Given("I have the orders for a universe from 01/01/2019 to 01/01/2019 :", ((string)(null)), table8, "Given ");
#line 65
   testRunner.When("I run the cancelled orders rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 66
   testRunner.Then("I will have 1 cancelled orders alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("One cancelled order only yields no alert")]
        public virtual void OneCancelledOrderOnlyYieldsNoAlert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One cancelled order only yields no alert", null, ((string[])(null)));
#line 68
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "CancelledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table9.AddRow(new string[] {
                        "Barclays",
                        "1",
                        "01/01/2019 10:30:00",
                        "01/01/2019",
                        "Market",
                        "Buy",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
#line 69
  testRunner.Given("I have the orders for a universe from 01/01/2019 to 01/01/2019 :", ((string)(null)), table9, "Given ");
#line 72
   testRunner.When("I run the cancelled orders rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 73
   testRunner.Then("I will have 0 cancelled orders alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("One cancelled orders out of eleven yields two alert")]
        public virtual void OneCancelledOrdersOutOfElevenYieldsTwoAlert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One cancelled orders out of eleven yields two alert", null, ((string[])(null)));
#line 75
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "CancelledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table10.AddRow(new string[] {
                        "Barclays",
                        "1",
                        "01/01/2019",
                        "",
                        "Market",
                        "Buy",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
            table10.AddRow(new string[] {
                        "Barclays",
                        "2",
                        "01/01/2019",
                        "01/01/2019",
                        "Market",
                        "Buy",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
            table10.AddRow(new string[] {
                        "Barclays",
                        "3",
                        "01/01/2019",
                        "",
                        "Market",
                        "Buy",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
            table10.AddRow(new string[] {
                        "Barclays",
                        "4",
                        "01/01/2019",
                        "",
                        "Market",
                        "Buy",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
            table10.AddRow(new string[] {
                        "Barclays",
                        "5",
                        "01/01/2019",
                        "",
                        "Market",
                        "Buy",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
            table10.AddRow(new string[] {
                        "Barclays",
                        "6",
                        "01/01/2019",
                        "",
                        "Market",
                        "Buy",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
            table10.AddRow(new string[] {
                        "Barclays",
                        "7",
                        "01/01/2019",
                        "",
                        "Market",
                        "Buy",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
            table10.AddRow(new string[] {
                        "Barclays",
                        "8",
                        "01/01/2019",
                        "",
                        "Market",
                        "Buy",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
            table10.AddRow(new string[] {
                        "Barclays",
                        "9",
                        "01/01/2019",
                        "",
                        "Market",
                        "Buy",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
            table10.AddRow(new string[] {
                        "Barclays",
                        "10",
                        "01/01/2019",
                        "",
                        "Market",
                        "Buy",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
            table10.AddRow(new string[] {
                        "Barclays",
                        "11",
                        "01/01/2019",
                        "",
                        "Market",
                        "Buy",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
#line 76
  testRunner.Given("I have the orders for a universe from 01/01/2019 to 01/01/2019 :", ((string)(null)), table10, "Given ");
#line 89
   testRunner.When("I run the cancelled orders rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 90
   testRunner.Then("I will have 2 cancelled orders alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("One cancelled orders out of ten yields two alert")]
        public virtual void OneCancelledOrdersOutOfTenYieldsTwoAlert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One cancelled orders out of ten yields two alert", null, ((string[])(null)));
#line 92
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "CancelledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table11.AddRow(new string[] {
                        "Barclays",
                        "1",
                        "01/01/2019",
                        "",
                        "Market",
                        "Buy",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
            table11.AddRow(new string[] {
                        "Barclays",
                        "2",
                        "01/01/2019",
                        "",
                        "Market",
                        "Buy",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
            table11.AddRow(new string[] {
                        "Barclays",
                        "3",
                        "01/01/2019",
                        "01/01/2019",
                        "Market",
                        "Buy",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
            table11.AddRow(new string[] {
                        "Barclays",
                        "4",
                        "01/01/2019",
                        "",
                        "Market",
                        "Buy",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
            table11.AddRow(new string[] {
                        "Barclays",
                        "5",
                        "01/01/2019",
                        "",
                        "Market",
                        "Buy",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
            table11.AddRow(new string[] {
                        "Barclays",
                        "6",
                        "01/01/2019",
                        "",
                        "Market",
                        "Buy",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
            table11.AddRow(new string[] {
                        "Barclays",
                        "7",
                        "01/01/2019",
                        "",
                        "Market",
                        "Buy",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
            table11.AddRow(new string[] {
                        "Barclays",
                        "8",
                        "01/01/2019",
                        "",
                        "Market",
                        "Buy",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
            table11.AddRow(new string[] {
                        "Barclays",
                        "9",
                        "01/01/2019",
                        "",
                        "Market",
                        "Buy",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
            table11.AddRow(new string[] {
                        "Barclays",
                        "10",
                        "01/01/2019",
                        "",
                        "Market",
                        "Buy",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
#line 93
  testRunner.Given("I have the orders for a universe from 01/01/2019 to 01/01/2019 :", ((string)(null)), table11, "Given ");
#line 105
   testRunner.When("I run the cancelled orders rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 106
   testRunner.Then("I will have 2 cancelled orders alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Ten cancelled orders out of eleven yields one alert")]
        public virtual void TenCancelledOrdersOutOfElevenYieldsOneAlert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ten cancelled orders out of eleven yields one alert", null, ((string[])(null)));
#line 108
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "CancelledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table12.AddRow(new string[] {
                        "Barclays",
                        "1",
                        "01/01/2019",
                        "",
                        "Market",
                        "Sell",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
            table12.AddRow(new string[] {
                        "Barclays",
                        "2",
                        "01/01/2019",
                        "01/01/2019",
                        "Market",
                        "Sell",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
            table12.AddRow(new string[] {
                        "Barclays",
                        "3",
                        "01/01/2019",
                        "01/01/2019",
                        "Market",
                        "Sell",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
            table12.AddRow(new string[] {
                        "Barclays",
                        "4",
                        "01/01/2019",
                        "01/01/2019",
                        "Market",
                        "Sell",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
            table12.AddRow(new string[] {
                        "Barclays",
                        "5",
                        "01/01/2019",
                        "01/01/2019",
                        "Market",
                        "Sell",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
            table12.AddRow(new string[] {
                        "Barclays",
                        "6",
                        "01/01/2019",
                        "01/01/2019",
                        "Market",
                        "Sell",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
            table12.AddRow(new string[] {
                        "Barclays",
                        "7",
                        "01/01/2019",
                        "01/01/2019",
                        "Market",
                        "Sell",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
            table12.AddRow(new string[] {
                        "Barclays",
                        "8",
                        "01/01/2019",
                        "01/01/2019",
                        "Market",
                        "Sell",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
            table12.AddRow(new string[] {
                        "Barclays",
                        "9",
                        "01/01/2019",
                        "01/01/2019",
                        "Market",
                        "Sell",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
            table12.AddRow(new string[] {
                        "Barclays",
                        "10",
                        "01/01/2019",
                        "01/01/2019",
                        "Market",
                        "Sell",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
            table12.AddRow(new string[] {
                        "Barclays",
                        "11",
                        "01/01/2019",
                        "01/01/2019",
                        "Market",
                        "Sell",
                        "GBX",
                        "",
                        "",
                        "100",
                        ""});
#line 109
  testRunner.Given("I have the orders for a universe from 01/01/2019 to 01/01/2019 :", ((string)(null)), table12, "Given ");
#line 122
   testRunner.When("I run the cancelled orders rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 123
   testRunner.Then("I will have 10 cancelled orders alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
