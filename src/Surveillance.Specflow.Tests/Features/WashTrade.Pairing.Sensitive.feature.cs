// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Surveillance.Specflow.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("WashTrade Pairing Sensitive Parameters")]
    public partial class WashTradePairingSensitiveParametersFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "WashTrade.Pairing.Sensitive.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "WashTrade Pairing Sensitive Parameters", "\tIn order to meet MAR compliance requirements\r\n\tI need to be able to detect when " +
                    "traders are executing trades\r\n\twith no meaningful change of ownership\r\n\tBy pairi" +
                    "ng their trades for average value change being below\r\n\tthreshold parameters", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 8
#line hidden
            TechTalk.SpecFlow.Table table166 = new TechTalk.SpecFlow.Table(new string[] {
                        "WindowHours",
                        "PairingPositionMinimumNumberOfPairedTrades",
                        "PairingPositionPercentagePriceChangeThresholdPerPair",
                        "PairingPositionPercentageVolumeDifferenceThreshold",
                        "PairingPositionMaximumAbsoluteCurrencyAmount",
                        "PairingPositionMaximumAbsoluteCurrency",
                        "UsePairing"});
            table166.AddRow(new string[] {
                        "1",
                        "2",
                        "0.03",
                        "0.03",
                        "10000",
                        "GBX",
                        "true"});
#line 9
 testRunner.Given("I have the wash trade rule parameter values", ((string)(null)), table166, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Empty Universe yields no alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        public virtual void EmptyUniverseYieldsNoAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Empty Universe yields no alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive"});
#line 16
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table167 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
#line 17
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table167, "Given ");
#line 19
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("One Trade For Vodafone yields no alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        public virtual void OneTradeForVodafoneYieldsNoAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One Trade For Vodafone yields no alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive"});
#line 25
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table168 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table168.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
#line 26
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table168, "Given ");
#line 29
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("One Trade For Barclays yields no alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        public virtual void OneTradeForBarclaysYieldsNoAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One Trade For Barclays yields no alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive"});
#line 35
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table169 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table169.AddRow(new string[] {
                        "Barclays",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
#line 36
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table169, "Given ");
#line 39
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trades In Wash Trade For Different Securities yields one alert")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        public virtual void TwoTradesInWashTradeForDifferentSecuritiesYieldsOneAlert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trades In Wash Trade For Different Securities yields one alert", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive"});
#line 45
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table170 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table170.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table170.AddRow(new string[] {
                        "Barclays",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
#line 46
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table170, "Given ");
#line 50
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 51
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Three Trades at same price point In Wash Trade yields no alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        public virtual void ThreeTradesAtSamePricePointInWashTradeYieldsNoAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Three Trades at same price point In Wash Trade yields no alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive"});
#line 56
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table171 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table171.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table171.AddRow(new string[] {
                        "Vodafone",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table171.AddRow(new string[] {
                        "Vodafone",
                        "2",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
#line 57
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table171, "Given ");
#line 62
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 63
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trades In Wash Trade yields one alert")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        public virtual void TwoTradesInWashTradeYieldsOneAlert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trades In Wash Trade yields one alert", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive"});
#line 68
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table172 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table172.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table172.AddRow(new string[] {
                        "Vodafone",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
#line 69
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table172, "Given ");
#line 73
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 74
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two trades when min number of trades threshold set to four yields zero alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        [NUnit.Framework.CategoryAttribute("MinimumNumberOfTrades")]
        public virtual void TwoTradesWhenMinNumberOfTradesThresholdSetToFourYieldsZeroAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two trades when min number of trades threshold set to four yields zero alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive",
                        "MinimumNumberOfTrades"});
#line 80
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table173 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table173.AddRow(new string[] {
                        "Barclays",
                        "0",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table173.AddRow(new string[] {
                        "Barclays",
                        "1",
                        "01/01/2018 10:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 10:33:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
#line 81
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table173, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table174 = new TechTalk.SpecFlow.Table(new string[] {
                        "WindowHours",
                        "PairingPositionMinimumNumberOfPairedTrades",
                        "PairingPositionPercentagePriceChangeThresholdPerPair",
                        "PairingPositionPercentageVolumeDifferenceThreshold",
                        "PairingPositionMaximumAbsoluteCurrencyAmount",
                        "PairingPositionMaximumAbsoluteCurrency",
                        "UsePairing"});
            table174.AddRow(new string[] {
                        "1",
                        "4",
                        "0.03",
                        "0.03",
                        "10000",
                        "GBX",
                        "true"});
#line 85
 testRunner.And("I have the wash trade rule parameter values", ((string)(null)), table174, "And ");
#line 88
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 89
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Four Trade For Barclays when min number of trades threshold set to four yields on" +
            "e alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        [NUnit.Framework.CategoryAttribute("MinimumNumberOfTrades")]
        public virtual void FourTradeForBarclaysWhenMinNumberOfTradesThresholdSetToFourYieldsOneAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Four Trade For Barclays when min number of trades threshold set to four yields on" +
                    "e alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive",
                        "MinimumNumberOfTrades"});
#line 95
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table175 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table175.AddRow(new string[] {
                        "Barclays",
                        "0",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table175.AddRow(new string[] {
                        "Barclays",
                        "1",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table175.AddRow(new string[] {
                        "Barclays",
                        "2",
                        "01/01/2018 10:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 10:33:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table175.AddRow(new string[] {
                        "Barclays",
                        "3",
                        "01/01/2018 10:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 10:33:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
#line 96
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table175, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table176 = new TechTalk.SpecFlow.Table(new string[] {
                        "WindowHours",
                        "PairingPositionMinimumNumberOfPairedTrades",
                        "PairingPositionPercentagePriceChangeThresholdPerPair",
                        "PairingPositionPercentageVolumeDifferenceThreshold",
                        "PairingPositionMaximumAbsoluteCurrencyAmount",
                        "PairingPositionMaximumAbsoluteCurrency",
                        "UsePairing"});
            table176.AddRow(new string[] {
                        "1",
                        "4",
                        "0.03",
                        "0.03",
                        "10000",
                        "GBX",
                        "true"});
#line 102
 testRunner.And("I have the wash trade rule parameter values", ((string)(null)), table176, "And ");
#line 105
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 106
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Ten Trade For Barclays when min number of trades threshold set to four yields one" +
            " alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        [NUnit.Framework.CategoryAttribute("MinimumNumberOfTrades")]
        public virtual void TenTradeForBarclaysWhenMinNumberOfTradesThresholdSetToFourYieldsOneAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ten Trade For Barclays when min number of trades threshold set to four yields one" +
                    " alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive",
                        "MinimumNumberOfTrades"});
#line 112
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table177 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table177.AddRow(new string[] {
                        "Barclays",
                        "0",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table177.AddRow(new string[] {
                        "Barclays",
                        "1",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table177.AddRow(new string[] {
                        "Barclays",
                        "2",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table177.AddRow(new string[] {
                        "Barclays",
                        "3",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table177.AddRow(new string[] {
                        "Barclays",
                        "4",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table177.AddRow(new string[] {
                        "Barclays",
                        "5",
                        "01/01/2018 10:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 10:33:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table177.AddRow(new string[] {
                        "Barclays",
                        "6",
                        "01/01/2018 10:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 10:33:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table177.AddRow(new string[] {
                        "Barclays",
                        "7",
                        "01/01/2018 10:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 10:33:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table177.AddRow(new string[] {
                        "Barclays",
                        "8",
                        "01/01/2018 10:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 10:33:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table177.AddRow(new string[] {
                        "Barclays",
                        "9",
                        "01/01/2018 10:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 10:33:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
#line 113
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table177, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table178 = new TechTalk.SpecFlow.Table(new string[] {
                        "WindowHours",
                        "PairingPositionMinimumNumberOfPairedTrades",
                        "PairingPositionPercentagePriceChangeThresholdPerPair",
                        "PairingPositionPercentageVolumeDifferenceThreshold",
                        "PairingPositionMaximumAbsoluteCurrencyAmount",
                        "PairingPositionMaximumAbsoluteCurrency",
                        "UsePairing"});
            table178.AddRow(new string[] {
                        "1",
                        "4",
                        "0.03",
                        "0.03",
                        "10000",
                        "GBX",
                        "true"});
#line 125
 testRunner.And("I have the wash trade rule parameter values", ((string)(null)), table178, "And ");
#line 128
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 129
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trades In Wash Trade but outside of relative percentage value change yields z" +
            "ero alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        [NUnit.Framework.CategoryAttribute("percentofvaluechange")]
        public virtual void TwoTradesInWashTradeButOutsideOfRelativePercentageValueChangeYieldsZeroAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trades In Wash Trade but outside of relative percentage value change yields z" +
                    "ero alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive",
                        "percentofvaluechange"});
#line 136
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table179 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table179.AddRow(new string[] {
                        "BAE",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table179.AddRow(new string[] {
                        "BAE",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "96",
                        "1000",
                        "1000"});
#line 137
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table179, "Given ");
#line 141
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 142
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trades In Wash Trade and on relative percentage value change boundary yields " +
            "one alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        [NUnit.Framework.CategoryAttribute("percentofvaluechange")]
        public virtual void TwoTradesInWashTradeAndOnRelativePercentageValueChangeBoundaryYieldsOneAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trades In Wash Trade and on relative percentage value change boundary yields " +
                    "one alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive",
                        "percentofvaluechange"});
#line 148
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table180 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table180.AddRow(new string[] {
                        "BAE",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table180.AddRow(new string[] {
                        "BAE",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "103",
                        "1000",
                        "1000"});
#line 149
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table180, "Given ");
#line 153
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 154
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trades In Wash Trade and inside of relative percentage value change yields on" +
            "e alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        [NUnit.Framework.CategoryAttribute("percentofvaluechange")]
        public virtual void TwoTradesInWashTradeAndInsideOfRelativePercentageValueChangeYieldsOneAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trades In Wash Trade and inside of relative percentage value change yields on" +
                    "e alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive",
                        "percentofvaluechange"});
#line 160
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table181 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table181.AddRow(new string[] {
                        "BAE",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table181.AddRow(new string[] {
                        "BAE",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "98",
                        "1000",
                        "1000"});
#line 161
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table181, "Given ");
#line 165
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 166
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trades In Wash Trade but outside of relative percentage volume change yields " +
            "zero alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        [NUnit.Framework.CategoryAttribute("percentofvolumechange")]
        public virtual void TwoTradesInWashTradeButOutsideOfRelativePercentageVolumeChangeYieldsZeroAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trades In Wash Trade but outside of relative percentage volume change yields " +
                    "zero alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive",
                        "percentofvolumechange"});
#line 172
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table182 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table182.AddRow(new string[] {
                        "AMD",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table182.AddRow(new string[] {
                        "AMD",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "99",
                        "1031",
                        "1031"});
#line 173
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table182, "Given ");
#line 177
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 178
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trades In Wash Trade and on relative percentage volume change boundary yields" +
            " one alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        [NUnit.Framework.CategoryAttribute("percentofvolumechange")]
        public virtual void TwoTradesInWashTradeAndOnRelativePercentageVolumeChangeBoundaryYieldsOneAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trades In Wash Trade and on relative percentage volume change boundary yields" +
                    " one alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive",
                        "percentofvolumechange"});
#line 184
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table183 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table183.AddRow(new string[] {
                        "AMD",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table183.AddRow(new string[] {
                        "AMD",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "99",
                        "1030",
                        "1030"});
#line 185
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table183, "Given ");
#line 189
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 190
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trades In Wash Trade and inside of relative percentage volume change yields o" +
            "ne alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        [NUnit.Framework.CategoryAttribute("percentofvolumechange")]
        public virtual void TwoTradesInWashTradeAndInsideOfRelativePercentageVolumeChangeYieldsOneAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trades In Wash Trade and inside of relative percentage volume change yields o" +
                    "ne alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive",
                        "percentofvolumechange"});
#line 196
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table184 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table184.AddRow(new string[] {
                        "AMD",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table184.AddRow(new string[] {
                        "AMD",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "99",
                        "1029",
                        "1029"});
#line 197
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table184, "Given ");
#line 201
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 202
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trades In Wash Trade and inside of absolute value change yields one alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        [NUnit.Framework.CategoryAttribute("maximumabsolutevaluechange")]
        public virtual void TwoTradesInWashTradeAndInsideOfAbsoluteValueChangeYieldsOneAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trades In Wash Trade and inside of absolute value change yields one alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive",
                        "maximumabsolutevaluechange"});
#line 210
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table185 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table185.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "10000",
                        "1000000",
                        "1000000"});
            table185.AddRow(new string[] {
                        "Vodafone",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "10000",
                        "1000000",
                        "1000000"});
#line 211
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table185, "Given ");
#line 215
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 216
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trades In Wash Trade and exactly absolute value change yields one alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        [NUnit.Framework.CategoryAttribute("maximumabsolutevaluechange")]
        public virtual void TwoTradesInWashTradeAndExactlyAbsoluteValueChangeYieldsOneAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trades In Wash Trade and exactly absolute value change yields one alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive",
                        "maximumabsolutevaluechange"});
#line 222
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table186 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table186.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "10000",
                        "1000000",
                        "1000000"});
            table186.AddRow(new string[] {
                        "Vodafone",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "10000",
                        "999999",
                        "999999"});
#line 223
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table186, "Given ");
#line 227
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 228
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trades In Wash Trade and outside of absolute value change change yields zero " +
            "alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        [NUnit.Framework.CategoryAttribute("maximumabsolutevaluechange")]
        public virtual void TwoTradesInWashTradeAndOutsideOfAbsoluteValueChangeChangeYieldsZeroAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trades In Wash Trade and outside of absolute value change change yields zero " +
                    "alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive",
                        "maximumabsolutevaluechange"});
#line 234
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table187 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table187.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "10000",
                        "1000000",
                        "1000000"});
            table187.AddRow(new string[] {
                        "Vodafone",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "10000",
                        "999998",
                        "999998"});
#line 235
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table187, "Given ");
#line 239
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 240
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Five Trade For Barclays yields zero alerts when just buys")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        [NUnit.Framework.CategoryAttribute("justbuy")]
        public virtual void FiveTradeForBarclaysYieldsZeroAlertsWhenJustBuys()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Five Trade For Barclays yields zero alerts when just buys", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive",
                        "justbuy"});
#line 247
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table188 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table188.AddRow(new string[] {
                        "Barclays",
                        "0",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "1000000",
                        "1000000",
                        "1000000"});
            table188.AddRow(new string[] {
                        "Barclays",
                        "1",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "1000000",
                        "1000000",
                        "1000000"});
            table188.AddRow(new string[] {
                        "Barclays",
                        "2",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "1000000",
                        "1000000",
                        "1000000"});
            table188.AddRow(new string[] {
                        "Barclays",
                        "3",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "1000000",
                        "1000000",
                        "1000000"});
            table188.AddRow(new string[] {
                        "Barclays",
                        "4",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "1000000",
                        "1000000",
                        "1000000"});
#line 248
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table188, "Given ");
#line 255
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 256
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Five Trade For Barclays yields zero alerts when just sells")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        [NUnit.Framework.CategoryAttribute("justsell")]
        public virtual void FiveTradeForBarclaysYieldsZeroAlertsWhenJustSells()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Five Trade For Barclays yields zero alerts when just sells", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive",
                        "justsell"});
#line 262
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table189 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table189.AddRow(new string[] {
                        "Barclays",
                        "0",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "1000000",
                        "1000000",
                        "1000000"});
            table189.AddRow(new string[] {
                        "Barclays",
                        "1",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "1000000",
                        "1000000",
                        "1000000"});
            table189.AddRow(new string[] {
                        "Barclays",
                        "2",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "1000000",
                        "1000000",
                        "1000000"});
            table189.AddRow(new string[] {
                        "Barclays",
                        "3",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "1000000",
                        "1000000",
                        "1000000"});
            table189.AddRow(new string[] {
                        "Barclays",
                        "4",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "1000000",
                        "1000000",
                        "1000000"});
#line 263
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table189, "Given ");
#line 270
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 271
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trade For Nvidia yields one alerts with losses")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        [NUnit.Framework.CategoryAttribute("washtradelosses")]
        public virtual void TwoTradeForNvidiaYieldsOneAlertsWithLosses()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trade For Nvidia yields one alerts with losses", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive",
                        "washtradelosses"});
#line 277
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table190 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table190.AddRow(new string[] {
                        "Nvidia",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table190.AddRow(new string[] {
                        "Nvidia",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table190.AddRow(new string[] {
                        "Nvidia",
                        "1",
                        "01/01/2018 10:00:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 10:00:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "99",
                        "1000",
                        "1000"});
            table190.AddRow(new string[] {
                        "Nvidia",
                        "1",
                        "01/01/2018 10:00:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 10:00:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "98",
                        "1000",
                        "1000"});
#line 278
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table190, "Given ");
#line 284
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 285
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trade For Nvidia with partial fills yields one alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        [NUnit.Framework.CategoryAttribute("washtradepartialfill")]
        public virtual void TwoTradeForNvidiaWithPartialFillsYieldsOneAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trade For Nvidia with partial fills yields one alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive",
                        "washtradepartialfill"});
#line 293
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table191 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table191.AddRow(new string[] {
                        "Nvidia",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "150"});
            table191.AddRow(new string[] {
                        "Nvidia",
                        "1",
                        "01/01/2018 10:00:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 10:00:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "150"});
#line 294
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table191, "Given ");
#line 298
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 299
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trade For Nvidia with pre market order times yields one alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        [NUnit.Framework.CategoryAttribute("washtradeearlyorder")]
        public virtual void TwoTradeForNvidiaWithPreMarketOrderTimesYieldsOneAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trade For Nvidia with pre market order times yields one alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive",
                        "washtradeearlyorder"});
#line 305
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table192 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table192.AddRow(new string[] {
                        "Nvidia",
                        "0",
                        "01/01/2018 06:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 06:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "150"});
            table192.AddRow(new string[] {
                        "Nvidia",
                        "1",
                        "01/01/2018 06:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 06:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "150"});
#line 306
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 02/01/2018 :", ((string)(null)), table192, "Given ");
#line 310
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 311
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trade For Nvidia with post market order times yields one alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        [NUnit.Framework.CategoryAttribute("washtradelateorder")]
        public virtual void TwoTradeForNvidiaWithPostMarketOrderTimesYieldsOneAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trade For Nvidia with post market order times yields one alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive",
                        "washtradelateorder"});
#line 317
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table193 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table193.AddRow(new string[] {
                        "Nvidia",
                        "0",
                        "01/01/2018 20:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 20:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "150"});
            table193.AddRow(new string[] {
                        "Nvidia",
                        "1",
                        "01/01/2018 20:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 20:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "150"});
#line 318
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 02/01/2018 :", ((string)(null)), table193, "Given ");
#line 322
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 323
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trade For Nvidia with next day sell within window yields one alert")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        [NUnit.Framework.CategoryAttribute("washtradenextdaysell")]
        public virtual void TwoTradeForNvidiaWithNextDaySellWithinWindowYieldsOneAlert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trade For Nvidia with next day sell within window yields one alert", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive",
                        "washtradenextdaysell"});
#line 329
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table194 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table194.AddRow(new string[] {
                        "Nvidia",
                        "0",
                        "01/01/2018 12:00:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 12:00:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "150"});
            table194.AddRow(new string[] {
                        "Nvidia",
                        "1",
                        "01/02/2018 12:00:00",
                        "",
                        "",
                        "",
                        "",
                        "01/02/2018 12:00:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "150"});
#line 330
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table194, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table195 = new TechTalk.SpecFlow.Table(new string[] {
                        "WindowHours",
                        "PairingPositionMinimumNumberOfPairedTrades",
                        "PairingPositionPercentagePriceChangeThresholdPerPair",
                        "PairingPositionPercentageVolumeDifferenceThreshold",
                        "PairingPositionMaximumAbsoluteCurrencyAmount",
                        "PairingPositionMaximumAbsoluteCurrency",
                        "UsePairing"});
            table195.AddRow(new string[] {
                        "24",
                        "2",
                        "0.10",
                        "0.10",
                        "1000000",
                        "GBX",
                        "true"});
#line 334
 testRunner.And("I have the wash trade rule parameter values", ((string)(null)), table195, "And ");
#line 337
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 338
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trade For Nvidia with next day sell outside window yields zero alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        [NUnit.Framework.CategoryAttribute("washtradenextdaysell")]
        public virtual void TwoTradeForNvidiaWithNextDaySellOutsideWindowYieldsZeroAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trade For Nvidia with next day sell outside window yields zero alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive",
                        "washtradenextdaysell"});
#line 344
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table196 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table196.AddRow(new string[] {
                        "Nvidia",
                        "0",
                        "01/01/2018 12:00:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 12:00:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "150"});
            table196.AddRow(new string[] {
                        "Nvidia",
                        "1",
                        "01/02/2018 12:00:00",
                        "",
                        "",
                        "",
                        "",
                        "01/02/2018 12:00:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "150"});
#line 345
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 02/01/2018 :", ((string)(null)), table196, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table197 = new TechTalk.SpecFlow.Table(new string[] {
                        "WindowHours",
                        "PairingPositionMinimumNumberOfPairedTrades",
                        "PairingPositionPercentagePriceChangeThresholdPerPair",
                        "PairingPositionPercentageVolumeDifferenceThreshold",
                        "PairingPositionMaximumAbsoluteCurrencyAmount",
                        "PairingPositionMaximumAbsoluteCurrency",
                        "UsePairing"});
            table197.AddRow(new string[] {
                        "22",
                        "2",
                        "0.10",
                        "0.10",
                        "1000000",
                        "GBX",
                        "true"});
#line 349
 testRunner.And("I have the wash trade rule parameter values", ((string)(null)), table197, "And ");
#line 352
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 353
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trade For Nvidia and two for vodafone yields two alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        [NUnit.Framework.CategoryAttribute("washtrademultiplealerts")]
        public virtual void TwoTradeForNvidiaAndTwoForVodafoneYieldsTwoAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trade For Nvidia and two for vodafone yields two alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive",
                        "washtrademultiplealerts"});
#line 359
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table198 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table198.AddRow(new string[] {
                        "Nvidia",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table198.AddRow(new string[] {
                        "Nvidia",
                        "1",
                        "01/01/2018 10:00:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 10:00:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table198.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table198.AddRow(new string[] {
                        "Vodafone",
                        "1",
                        "01/01/2018 10:00:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 10:00:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
#line 360
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table198, "Given ");
#line 366
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 367
 testRunner.Then("I will have 2 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trade For Nvidia in USD converts to GBX for absolute currency breach")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        [NUnit.Framework.CategoryAttribute("washtradecurrencies")]
        public virtual void TwoTradeForNvidiaInUSDConvertsToGBXForAbsoluteCurrencyBreach()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trade For Nvidia in USD converts to GBX for absolute currency breach", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive",
                        "washtradecurrencies"});
#line 374
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table199 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table199.AddRow(new string[] {
                        "Nvidia",
                        "0",
                        "01/01/2018 06:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 06:30:00",
                        "MARKET",
                        "BUY",
                        "USD",
                        "",
                        "10000000",
                        "1000",
                        "150"});
            table199.AddRow(new string[] {
                        "Nvidia",
                        "1",
                        "01/01/2018 06:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 06:30:00",
                        "MARKET",
                        "SELL",
                        "USD",
                        "",
                        "10000000",
                        "1000",
                        "150"});
#line 375
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 02/01/2018 :", ((string)(null)), table199, "Given ");
#line 379
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 380
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
