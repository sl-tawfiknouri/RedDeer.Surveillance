// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Surveillance.Specflow.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("WashTrade Pairing Sensitive Parameters")]
    public partial class WashTradePairingSensitiveParametersFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "WashTrade.Pairing.Sensitive.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "WashTrade Pairing Sensitive Parameters", "\tIn order to meet MAR compliance requirements\r\n\tI need to be able to detect when " +
                    "traders are executing trades\r\n\twith no meaningful change of ownership\r\n\tBy pairi" +
                    "ng their trades for average value change being below\r\n\tthreshold parameters", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 8
#line hidden
            TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                        "WindowHours",
                        "PairingPositionMinimumNumberOfPairedTrades",
                        "PairingPositionPercentagePriceChangeThresholdPerPair",
                        "PairingPositionPercentageVolumeDifferenceThreshold",
                        "PairingPositionMaximumAbsoluteCurrencyAmount",
                        "PairingPositionMaximumAbsoluteCurrency",
                        "UsePairing"});
            table74.AddRow(new string[] {
                        "1",
                        "2",
                        "0.03",
                        "0.03",
                        "10000",
                        "GBX",
                        "true"});
#line 9
 testRunner.Given("I have the wash trade rule parameter values", ((string)(null)), table74, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Empty Universe yields no alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        public virtual void EmptyUniverseYieldsNoAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Empty Universe yields no alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive"});
#line 16
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
#line 17
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table75, "Given ");
#line 19
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("One Trade For Vodafone yields no alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        public virtual void OneTradeForVodafoneYieldsNoAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One Trade For Vodafone yields no alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive"});
#line 25
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table76.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
#line 26
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table76, "Given ");
#line 29
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("One Trade For Barclays yields no alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        public virtual void OneTradeForBarclaysYieldsNoAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One Trade For Barclays yields no alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive"});
#line 35
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table77.AddRow(new string[] {
                        "Barclays",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
#line 36
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table77, "Given ");
#line 39
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trades In Wash Trade For Different Securities yields one alert")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        public virtual void TwoTradesInWashTradeForDifferentSecuritiesYieldsOneAlert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trades In Wash Trade For Different Securities yields one alert", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive"});
#line 45
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table78.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table78.AddRow(new string[] {
                        "Barclays",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
#line 46
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table78, "Given ");
#line 50
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 51
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Three Trades at same price point In Wash Trade yields no alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        public virtual void ThreeTradesAtSamePricePointInWashTradeYieldsNoAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Three Trades at same price point In Wash Trade yields no alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive"});
#line 56
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table79.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table79.AddRow(new string[] {
                        "Vodafone",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table79.AddRow(new string[] {
                        "Vodafone",
                        "2",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
#line 57
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table79, "Given ");
#line 62
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 63
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trades In Wash Trade yields one alert")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        public virtual void TwoTradesInWashTradeYieldsOneAlert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trades In Wash Trade yields one alert", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive"});
#line 68
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table80.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table80.AddRow(new string[] {
                        "Vodafone",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
#line 69
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table80, "Given ");
#line 73
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 74
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two trades when min number of trades threshold set to four yields zero alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        [NUnit.Framework.CategoryAttribute("MinimumNumberOfTrades")]
        public virtual void TwoTradesWhenMinNumberOfTradesThresholdSetToFourYieldsZeroAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two trades when min number of trades threshold set to four yields zero alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive",
                        "MinimumNumberOfTrades"});
#line 80
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table81.AddRow(new string[] {
                        "Barclays",
                        "0",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table81.AddRow(new string[] {
                        "Barclays",
                        "1",
                        "01/01/2018 10:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 10:33:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
#line 81
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table81, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                        "WindowHours",
                        "PairingPositionMinimumNumberOfPairedTrades",
                        "PairingPositionPercentagePriceChangeThresholdPerPair",
                        "PairingPositionPercentageVolumeDifferenceThreshold",
                        "PairingPositionMaximumAbsoluteCurrencyAmount",
                        "PairingPositionMaximumAbsoluteCurrency",
                        "UsePairing"});
            table82.AddRow(new string[] {
                        "1",
                        "4",
                        "0.03",
                        "0.03",
                        "10000",
                        "GBX",
                        "true"});
#line 85
 testRunner.And("I have the wash trade rule parameter values", ((string)(null)), table82, "And ");
#line 88
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 89
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Four Trade For Barclays when min number of trades threshold set to four yields on" +
            "e alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        [NUnit.Framework.CategoryAttribute("MinimumNumberOfTrades")]
        public virtual void FourTradeForBarclaysWhenMinNumberOfTradesThresholdSetToFourYieldsOneAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Four Trade For Barclays when min number of trades threshold set to four yields on" +
                    "e alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive",
                        "MinimumNumberOfTrades"});
#line 95
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table83.AddRow(new string[] {
                        "Barclays",
                        "0",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table83.AddRow(new string[] {
                        "Barclays",
                        "1",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table83.AddRow(new string[] {
                        "Barclays",
                        "2",
                        "01/01/2018 10:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 10:33:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table83.AddRow(new string[] {
                        "Barclays",
                        "3",
                        "01/01/2018 10:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 10:33:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
#line 96
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table83, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                        "WindowHours",
                        "PairingPositionMinimumNumberOfPairedTrades",
                        "PairingPositionPercentagePriceChangeThresholdPerPair",
                        "PairingPositionPercentageVolumeDifferenceThreshold",
                        "PairingPositionMaximumAbsoluteCurrencyAmount",
                        "PairingPositionMaximumAbsoluteCurrency",
                        "UsePairing"});
            table84.AddRow(new string[] {
                        "1",
                        "4",
                        "0.03",
                        "0.03",
                        "10000",
                        "GBX",
                        "true"});
#line 102
 testRunner.And("I have the wash trade rule parameter values", ((string)(null)), table84, "And ");
#line 105
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 106
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Ten Trade For Barclays when min number of trades threshold set to four yields one" +
            " alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        [NUnit.Framework.CategoryAttribute("MinimumNumberOfTrades")]
        public virtual void TenTradeForBarclaysWhenMinNumberOfTradesThresholdSetToFourYieldsOneAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ten Trade For Barclays when min number of trades threshold set to four yields one" +
                    " alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive",
                        "MinimumNumberOfTrades"});
#line 112
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table85.AddRow(new string[] {
                        "Barclays",
                        "0",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table85.AddRow(new string[] {
                        "Barclays",
                        "1",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table85.AddRow(new string[] {
                        "Barclays",
                        "2",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table85.AddRow(new string[] {
                        "Barclays",
                        "3",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table85.AddRow(new string[] {
                        "Barclays",
                        "4",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table85.AddRow(new string[] {
                        "Barclays",
                        "5",
                        "01/01/2018 10:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 10:33:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table85.AddRow(new string[] {
                        "Barclays",
                        "6",
                        "01/01/2018 10:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 10:33:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table85.AddRow(new string[] {
                        "Barclays",
                        "7",
                        "01/01/2018 10:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 10:33:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table85.AddRow(new string[] {
                        "Barclays",
                        "8",
                        "01/01/2018 10:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 10:33:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table85.AddRow(new string[] {
                        "Barclays",
                        "9",
                        "01/01/2018 10:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 10:33:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
#line 113
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table85, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                        "WindowHours",
                        "PairingPositionMinimumNumberOfPairedTrades",
                        "PairingPositionPercentagePriceChangeThresholdPerPair",
                        "PairingPositionPercentageVolumeDifferenceThreshold",
                        "PairingPositionMaximumAbsoluteCurrencyAmount",
                        "PairingPositionMaximumAbsoluteCurrency",
                        "UsePairing"});
            table86.AddRow(new string[] {
                        "1",
                        "4",
                        "0.03",
                        "0.03",
                        "10000",
                        "GBX",
                        "true"});
#line 125
 testRunner.And("I have the wash trade rule parameter values", ((string)(null)), table86, "And ");
#line 128
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 129
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trades In Wash Trade but outside of relative percentage value change yields z" +
            "ero alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        [NUnit.Framework.CategoryAttribute("percentofvaluechange")]
        public virtual void TwoTradesInWashTradeButOutsideOfRelativePercentageValueChangeYieldsZeroAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trades In Wash Trade but outside of relative percentage value change yields z" +
                    "ero alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive",
                        "percentofvaluechange"});
#line 136
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table87.AddRow(new string[] {
                        "BAE",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table87.AddRow(new string[] {
                        "BAE",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "96",
                        "1000",
                        "1000"});
#line 137
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table87, "Given ");
#line 141
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 142
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trades In Wash Trade and on relative percentage value change boundary yields " +
            "one alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        [NUnit.Framework.CategoryAttribute("percentofvaluechange")]
        public virtual void TwoTradesInWashTradeAndOnRelativePercentageValueChangeBoundaryYieldsOneAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trades In Wash Trade and on relative percentage value change boundary yields " +
                    "one alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive",
                        "percentofvaluechange"});
#line 148
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table88.AddRow(new string[] {
                        "BAE",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table88.AddRow(new string[] {
                        "BAE",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "103",
                        "1000",
                        "1000"});
#line 149
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table88, "Given ");
#line 153
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 154
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trades In Wash Trade and inside of relative percentage value change yields on" +
            "e alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        [NUnit.Framework.CategoryAttribute("percentofvaluechange")]
        public virtual void TwoTradesInWashTradeAndInsideOfRelativePercentageValueChangeYieldsOneAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trades In Wash Trade and inside of relative percentage value change yields on" +
                    "e alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive",
                        "percentofvaluechange"});
#line 160
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table89.AddRow(new string[] {
                        "BAE",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table89.AddRow(new string[] {
                        "BAE",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "98",
                        "1000",
                        "1000"});
#line 161
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table89, "Given ");
#line 165
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 166
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trades In Wash Trade but outside of relative percentage volume change yields " +
            "zero alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        [NUnit.Framework.CategoryAttribute("percentofvolumechange")]
        public virtual void TwoTradesInWashTradeButOutsideOfRelativePercentageVolumeChangeYieldsZeroAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trades In Wash Trade but outside of relative percentage volume change yields " +
                    "zero alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive",
                        "percentofvolumechange"});
#line 172
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table90.AddRow(new string[] {
                        "AMD",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table90.AddRow(new string[] {
                        "AMD",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "99",
                        "1031",
                        "1031"});
#line 173
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table90, "Given ");
#line 177
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 178
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trades In Wash Trade and on relative percentage volume change boundary yields" +
            " one alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        [NUnit.Framework.CategoryAttribute("percentofvolumechange")]
        public virtual void TwoTradesInWashTradeAndOnRelativePercentageVolumeChangeBoundaryYieldsOneAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trades In Wash Trade and on relative percentage volume change boundary yields" +
                    " one alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive",
                        "percentofvolumechange"});
#line 184
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table91 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table91.AddRow(new string[] {
                        "AMD",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table91.AddRow(new string[] {
                        "AMD",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "99",
                        "1030",
                        "1030"});
#line 185
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table91, "Given ");
#line 189
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 190
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trades In Wash Trade and inside of relative percentage volume change yields o" +
            "ne alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        [NUnit.Framework.CategoryAttribute("percentofvolumechange")]
        public virtual void TwoTradesInWashTradeAndInsideOfRelativePercentageVolumeChangeYieldsOneAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trades In Wash Trade and inside of relative percentage volume change yields o" +
                    "ne alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive",
                        "percentofvolumechange"});
#line 196
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table92 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table92.AddRow(new string[] {
                        "AMD",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table92.AddRow(new string[] {
                        "AMD",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "99",
                        "1029",
                        "1029"});
#line 197
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table92, "Given ");
#line 201
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 202
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trades In Wash Trade and inside of absolute value change yields one alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        [NUnit.Framework.CategoryAttribute("maximumabsolutevaluechange")]
        public virtual void TwoTradesInWashTradeAndInsideOfAbsoluteValueChangeYieldsOneAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trades In Wash Trade and inside of absolute value change yields one alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive",
                        "maximumabsolutevaluechange"});
#line 210
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table93 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table93.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "10000",
                        "1000000",
                        "1000000"});
            table93.AddRow(new string[] {
                        "Vodafone",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "10000",
                        "1000000",
                        "1000000"});
#line 211
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table93, "Given ");
#line 215
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 216
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trades In Wash Trade and exactly absolute value change yields one alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        [NUnit.Framework.CategoryAttribute("maximumabsolutevaluechange")]
        public virtual void TwoTradesInWashTradeAndExactlyAbsoluteValueChangeYieldsOneAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trades In Wash Trade and exactly absolute value change yields one alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive",
                        "maximumabsolutevaluechange"});
#line 222
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table94 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table94.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "10000",
                        "1000000",
                        "1000000"});
            table94.AddRow(new string[] {
                        "Vodafone",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "10000",
                        "999999",
                        "999999"});
#line 223
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table94, "Given ");
#line 227
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 228
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trades In Wash Trade and outside of absolute value change change yields zero " +
            "alerts")]
        [NUnit.Framework.CategoryAttribute("washtrade")]
        [NUnit.Framework.CategoryAttribute("washtradepairing")]
        [NUnit.Framework.CategoryAttribute("washtradesensitive")]
        [NUnit.Framework.CategoryAttribute("maximumabsolutevaluechange")]
        public virtual void TwoTradesInWashTradeAndOutsideOfAbsoluteValueChangeChangeYieldsZeroAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trades In Wash Trade and outside of absolute value change change yields zero " +
                    "alerts", null, new string[] {
                        "washtrade",
                        "washtradepairing",
                        "washtradesensitive",
                        "maximumabsolutevaluechange"});
#line 234
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table95 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table95.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "10000",
                        "1000000",
                        "1000000"});
            table95.AddRow(new string[] {
                        "Vodafone",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "10000",
                        "999998",
                        "999998"});
#line 235
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table95, "Given ");
#line 239
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 240
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
