// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Surveillance.Specflow.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("WashTrade Average Netting Sensitive Parameters")]
    [NUnit.Framework.CategoryAttribute("washtrade")]
    [NUnit.Framework.CategoryAttribute("washtradeAverageNetting")]
    [NUnit.Framework.CategoryAttribute("washtradesensitive")]
    public partial class WashTradeAverageNettingSensitiveParametersFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "WashTrade.AverageNetting.Sensitive.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "WashTrade Average Netting Sensitive Parameters", "\tIn order to meet MAR compliance requirements\r\n\tI need to be able to detect when " +
                    "traders are executing trades\r\n\twith no meaningful change of ownership\r\n\tBy netti" +
                    "ng their trades for average value change being below\r\n\tthreshold parameters", ProgrammingLanguage.CSharp, new string[] {
                        "washtrade",
                        "washtradeAverageNetting",
                        "washtradesensitive"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 11
#line hidden
            TechTalk.SpecFlow.Table table505 = new TechTalk.SpecFlow.Table(new string[] {
                        "WindowHours",
                        "MinimumNumberOfTrades",
                        "MaximumPositionChangeValue",
                        "MaximumAbsoluteValueChange",
                        "MaximumAbsoluteValueChangeCurrency",
                        "UseAverageNetting"});
            table505.AddRow(new string[] {
                        "1",
                        "2",
                        "0.01",
                        "10000",
                        "GBX",
                        "true"});
#line 12
 testRunner.Given("I have the wash trade rule parameter values", ((string)(null)), table505, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Empty Universe yields no alerts")]
        public virtual void EmptyUniverseYieldsNoAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Empty Universe yields no alerts", null, ((string[])(null)));
#line 17
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table506 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
#line 18
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table506, "Given ");
#line 20
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("One Trade For Vodafone yields no alerts")]
        public virtual void OneTradeForVodafoneYieldsNoAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One Trade For Vodafone yields no alerts", null, ((string[])(null)));
#line 24
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table507 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table507.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
#line 25
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table507, "Given ");
#line 28
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("One Trade For Barclays yields no alerts")]
        public virtual void OneTradeForBarclaysYieldsNoAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One Trade For Barclays yields no alerts", null, ((string[])(null)));
#line 32
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table508 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table508.AddRow(new string[] {
                        "Barclays",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
#line 33
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table508, "Given ");
#line 36
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trades In Wash Trade yields one alert")]
        public virtual void TwoTradesInWashTradeYieldsOneAlert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trades In Wash Trade yields one alert", null, ((string[])(null)));
#line 40
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table509 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table509.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table509.AddRow(new string[] {
                        "Vodafone",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
#line 41
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table509, "Given ");
#line 45
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 46
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trades In Wash Trade For Different Securities yields zero alert")]
        public virtual void TwoTradesInWashTradeForDifferentSecuritiesYieldsZeroAlert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trades In Wash Trade For Different Securities yields zero alert", null, ((string[])(null)));
#line 49
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table510 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table510.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table510.AddRow(new string[] {
                        "Barclays",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
#line 50
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table510, "Given ");
#line 54
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 55
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Three Trades at same price point In Wash Trade yields no alerts")]
        public virtual void ThreeTradesAtSamePricePointInWashTradeYieldsNoAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Three Trades at same price point In Wash Trade yields no alerts", null, ((string[])(null)));
#line 58
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table511 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table511.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table511.AddRow(new string[] {
                        "Vodafone",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table511.AddRow(new string[] {
                        "Vodafone",
                        "2",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
#line 59
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table511, "Given ");
#line 64
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 65
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Four trades at two price points yields two alerts")]
        public virtual void FourTradesAtTwoPricePointsYieldsTwoAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Four trades at two price points yields two alerts", null, ((string[])(null)));
#line 68
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table512 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table512.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table512.AddRow(new string[] {
                        "Vodafone",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table512.AddRow(new string[] {
                        "Vodafone",
                        "2",
                        "01/01/2018 09:35:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:35:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "200",
                        "1000",
                        "1000"});
            table512.AddRow(new string[] {
                        "Vodafone",
                        "3",
                        "01/01/2018 09:35:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:35:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "200",
                        "1000",
                        "1000"});
#line 69
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table512, "Given ");
#line 75
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 76
 testRunner.Then("I will have 2 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Five trades in two pairs with a single trade per three price points yields two al" +
            "erts")]
        public virtual void FiveTradesInTwoPairsWithASingleTradePerThreePricePointsYieldsTwoAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Five trades in two pairs with a single trade per three price points yields two al" +
                    "erts", null, ((string[])(null)));
#line 79
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table513 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table513.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table513.AddRow(new string[] {
                        "Vodafone",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table513.AddRow(new string[] {
                        "Vodafone",
                        "2",
                        "01/01/2018 09:35:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:35:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "200",
                        "1000",
                        "1000"});
            table513.AddRow(new string[] {
                        "Vodafone",
                        "3",
                        "01/01/2018 09:35:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:35:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "200",
                        "1000",
                        "1000"});
            table513.AddRow(new string[] {
                        "Vodafone",
                        "4",
                        "01/01/2018 09:40:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:40:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "300",
                        "1000",
                        "1000"});
#line 80
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table513, "Given ");
#line 87
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 88
 testRunner.Then("I will have 2 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trade For Nvidia yields one alerts when within 1 hour")]
        [NUnit.Framework.CategoryAttribute("timewindow")]
        public virtual void TwoTradeForNvidiaYieldsOneAlertsWhenWithin1Hour()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trade For Nvidia yields one alerts when within 1 hour", null, new string[] {
                        "timewindow"});
#line 93
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table514 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table514.AddRow(new string[] {
                        "Nvidia",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table514.AddRow(new string[] {
                        "Nvidia",
                        "1",
                        "01/01/2018 10:00:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 10:00:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
#line 94
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table514, "Given ");
#line 98
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 99
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trade For Nvidia yields no alerts when 2 hours apart")]
        [NUnit.Framework.CategoryAttribute("timewindow")]
        public virtual void TwoTradeForNvidiaYieldsNoAlertsWhen2HoursApart()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trade For Nvidia yields no alerts when 2 hours apart", null, new string[] {
                        "timewindow"});
#line 102
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table515 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table515.AddRow(new string[] {
                        "Nvidia",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table515.AddRow(new string[] {
                        "Nvidia",
                        "1",
                        "01/01/2018 11:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 11:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
#line 103
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table515, "Given ");
#line 107
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 108
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trade For Barclays yields one alerts when exactly 1 hour apart")]
        [NUnit.Framework.CategoryAttribute("timewindow")]
        public virtual void TwoTradeForBarclaysYieldsOneAlertsWhenExactly1HourApart()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trade For Barclays yields one alerts when exactly 1 hour apart", null, new string[] {
                        "timewindow"});
#line 112
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table516 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table516.AddRow(new string[] {
                        "Barclays",
                        "0",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table516.AddRow(new string[] {
                        "Barclays",
                        "1",
                        "01/01/2018 10:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 10:33:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
#line 113
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table516, "Given ");
#line 117
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 118
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Five Trade For Barclays yields zero alerts when just buys")]
        [NUnit.Framework.CategoryAttribute("justbuy")]
        public virtual void FiveTradeForBarclaysYieldsZeroAlertsWhenJustBuys()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Five Trade For Barclays yields zero alerts when just buys", null, new string[] {
                        "justbuy"});
#line 122
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table517 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table517.AddRow(new string[] {
                        "Barclays",
                        "0",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "1000000",
                        "1000000",
                        "1000000"});
            table517.AddRow(new string[] {
                        "Barclays",
                        "1",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "1000000",
                        "1000000",
                        "1000000"});
            table517.AddRow(new string[] {
                        "Barclays",
                        "2",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "1000000",
                        "1000000",
                        "1000000"});
            table517.AddRow(new string[] {
                        "Barclays",
                        "3",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "1000000",
                        "1000000",
                        "1000000"});
            table517.AddRow(new string[] {
                        "Barclays",
                        "4",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "1000000",
                        "1000000",
                        "1000000"});
#line 123
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table517, "Given ");
#line 130
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 131
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Five Trade For Barclays yields zero alerts when just sells")]
        [NUnit.Framework.CategoryAttribute("justsell")]
        public virtual void FiveTradeForBarclaysYieldsZeroAlertsWhenJustSells()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Five Trade For Barclays yields zero alerts when just sells", null, new string[] {
                        "justsell"});
#line 135
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table518 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table518.AddRow(new string[] {
                        "Barclays",
                        "0",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "1000000",
                        "1000000",
                        "1000000"});
            table518.AddRow(new string[] {
                        "Barclays",
                        "1",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "1000000",
                        "1000000",
                        "1000000"});
            table518.AddRow(new string[] {
                        "Barclays",
                        "2",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "1000000",
                        "1000000",
                        "1000000"});
            table518.AddRow(new string[] {
                        "Barclays",
                        "3",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "1000000",
                        "1000000",
                        "1000000"});
            table518.AddRow(new string[] {
                        "Barclays",
                        "4",
                        "01/01/2018 09:33:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:33:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "1000000",
                        "1000000",
                        "1000000"});
#line 136
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table518, "Given ");
#line 143
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 144
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trade For Nvidia yields one alerts with losses")]
        [NUnit.Framework.CategoryAttribute("washtradelosses")]
        public virtual void TwoTradeForNvidiaYieldsOneAlertsWithLosses()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trade For Nvidia yields one alerts with losses", null, new string[] {
                        "washtradelosses"});
#line 149
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table519 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table519.AddRow(new string[] {
                        "Nvidia",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "1000",
                        "1000",
                        "1000"});
            table519.AddRow(new string[] {
                        "Nvidia",
                        "1",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "1000",
                        "1000",
                        "1000"});
            table519.AddRow(new string[] {
                        "Nvidia",
                        "2",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "999",
                        "1000",
                        "1000"});
            table519.AddRow(new string[] {
                        "Nvidia",
                        "3",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "999",
                        "1000",
                        "1000"});
#line 150
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table519, "Given ");
#line 156
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 157
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trade For Nvidia with partial fills yields one alerts")]
        [NUnit.Framework.CategoryAttribute("washtradepartialfill")]
        public virtual void TwoTradeForNvidiaWithPartialFillsYieldsOneAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trade For Nvidia with partial fills yields one alerts", null, new string[] {
                        "washtradepartialfill"});
#line 161
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table520 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table520.AddRow(new string[] {
                        "Nvidia",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "150"});
            table520.AddRow(new string[] {
                        "Nvidia",
                        "1",
                        "01/01/2018 10:00:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 10:00:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "150"});
#line 162
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table520, "Given ");
#line 166
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 167
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trade For Nvidia with pre market order times yields one alerts")]
        [NUnit.Framework.CategoryAttribute("washtradeearlyorder")]
        public virtual void TwoTradeForNvidiaWithPreMarketOrderTimesYieldsOneAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trade For Nvidia with pre market order times yields one alerts", null, new string[] {
                        "washtradeearlyorder"});
#line 172
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table521 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table521.AddRow(new string[] {
                        "Nvidia",
                        "0",
                        "01/01/2018 06:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 06:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "150"});
            table521.AddRow(new string[] {
                        "Nvidia",
                        "1",
                        "01/01/2018 06:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 06:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "150"});
#line 173
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 02/01/2018 :", ((string)(null)), table521, "Given ");
#line 177
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 178
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trade For Nvidia with post market order times yields one alerts")]
        [NUnit.Framework.CategoryAttribute("washtradelateorder")]
        public virtual void TwoTradeForNvidiaWithPostMarketOrderTimesYieldsOneAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trade For Nvidia with post market order times yields one alerts", null, new string[] {
                        "washtradelateorder"});
#line 182
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table522 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table522.AddRow(new string[] {
                        "Nvidia",
                        "0",
                        "01/01/2018 20:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 20:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "150"});
            table522.AddRow(new string[] {
                        "Nvidia",
                        "1",
                        "01/01/2018 20:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 20:30:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "150"});
#line 183
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 02/01/2018 :", ((string)(null)), table522, "Given ");
#line 187
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 188
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trade For Nvidia with next day sell within window yields one alert")]
        [NUnit.Framework.CategoryAttribute("washtradenextdaysell")]
        public virtual void TwoTradeForNvidiaWithNextDaySellWithinWindowYieldsOneAlert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trade For Nvidia with next day sell within window yields one alert", null, new string[] {
                        "washtradenextdaysell"});
#line 193
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table523 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table523.AddRow(new string[] {
                        "Nvidia",
                        "0",
                        "01/01/2018 12:00:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 12:00:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "150"});
            table523.AddRow(new string[] {
                        "Nvidia",
                        "1",
                        "01/02/2018 12:00:00",
                        "",
                        "",
                        "",
                        "",
                        "01/02/2018 12:00:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "150"});
#line 194
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table523, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table524 = new TechTalk.SpecFlow.Table(new string[] {
                        "WindowHours",
                        "MinimumNumberOfTrades",
                        "MaximumPositionChangeValue",
                        "MaximumAbsoluteValueChange",
                        "MaximumAbsoluteValueChangeCurrency",
                        "UseAverageNetting"});
            table524.AddRow(new string[] {
                        "50",
                        "2",
                        "0.10",
                        "1000000",
                        "GBX",
                        "true"});
#line 198
 testRunner.And("I have the wash trade rule parameter values", ((string)(null)), table524, "And ");
#line 201
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 202
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trade For Nvidia with next day sell outside window yields zero alerts")]
        [NUnit.Framework.CategoryAttribute("washtradenextdaysell")]
        public virtual void TwoTradeForNvidiaWithNextDaySellOutsideWindowYieldsZeroAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trade For Nvidia with next day sell outside window yields zero alerts", null, new string[] {
                        "washtradenextdaysell"});
#line 206
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table525 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table525.AddRow(new string[] {
                        "Nvidia",
                        "0",
                        "01/01/2018 12:00:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 12:00:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "150"});
            table525.AddRow(new string[] {
                        "Nvidia",
                        "1",
                        "01/02/2018 12:00:00",
                        "",
                        "",
                        "",
                        "",
                        "01/02/2018 12:00:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "150"});
#line 207
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 02/01/2018 :", ((string)(null)), table525, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table526 = new TechTalk.SpecFlow.Table(new string[] {
                        "WindowHours",
                        "MinimumNumberOfTrades",
                        "MaximumPositionChangeValue",
                        "MaximumAbsoluteValueChange",
                        "MaximumAbsoluteValueChangeCurrency",
                        "UseAverageNetting"});
            table526.AddRow(new string[] {
                        "23",
                        "2",
                        "0.10",
                        "1000000",
                        "GBX",
                        "true"});
#line 211
 testRunner.And("I have the wash trade rule parameter values", ((string)(null)), table526, "And ");
#line 214
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 215
 testRunner.Then("I will have 0 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trade For Nvidia and two for vodafone yields two alerts")]
        [NUnit.Framework.CategoryAttribute("washtrademultiplealerts")]
        public virtual void TwoTradeForNvidiaAndTwoForVodafoneYieldsTwoAlerts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trade For Nvidia and two for vodafone yields two alerts", null, new string[] {
                        "washtrademultiplealerts"});
#line 219
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table527 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table527.AddRow(new string[] {
                        "Nvidia",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table527.AddRow(new string[] {
                        "Nvidia",
                        "1",
                        "01/01/2018 10:00:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 10:00:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table527.AddRow(new string[] {
                        "Vodafone",
                        "0",
                        "01/01/2018 09:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 09:30:00",
                        "MARKET",
                        "BUY",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
            table527.AddRow(new string[] {
                        "Vodafone",
                        "1",
                        "01/01/2018 10:00:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 10:00:00",
                        "MARKET",
                        "SELL",
                        "GBX",
                        "",
                        "100",
                        "1000",
                        "1000"});
#line 220
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 03/01/2018 :", ((string)(null)), table527, "Given ");
#line 226
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 227
 testRunner.Then("I will have 2 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two Trade For Nvidia in USD converts to GBX for absolute currency breach")]
        [NUnit.Framework.CategoryAttribute("washtradecurrencies")]
        public virtual void TwoTradeForNvidiaInUSDConvertsToGBXForAbsoluteCurrencyBreach()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two Trade For Nvidia in USD converts to GBX for absolute currency breach", null, new string[] {
                        "washtradecurrencies"});
#line 232
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table528 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityName",
                        "OrderId",
                        "PlacedDate",
                        "BookedDate",
                        "AmendedDate",
                        "RejectedDate",
                        "CancelledDate",
                        "FilledDate",
                        "Type",
                        "Direction",
                        "Currency",
                        "LimitPrice",
                        "AverageFillPrice",
                        "OrderedVolume",
                        "FilledVolume"});
            table528.AddRow(new string[] {
                        "Nvidia",
                        "0",
                        "01/01/2018 06:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 06:30:00",
                        "MARKET",
                        "BUY",
                        "USD",
                        "",
                        "10000000",
                        "1000",
                        "150"});
            table528.AddRow(new string[] {
                        "Nvidia",
                        "1",
                        "01/01/2018 06:30:00",
                        "",
                        "",
                        "",
                        "",
                        "01/01/2018 06:30:00",
                        "MARKET",
                        "SELL",
                        "USD",
                        "",
                        "10000000",
                        "1000",
                        "150"});
#line 233
 testRunner.Given("I have the orders for a universe from 01/01/2018 to 02/01/2018 :", ((string)(null)), table528, "Given ");
#line 237
 testRunner.When("I run the wash trade rule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 238
 testRunner.Then("I will have 1 wash trade alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
